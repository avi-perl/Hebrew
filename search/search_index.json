{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Hebrew(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\") <p> A python package with methods to handle the complexities of Hebrew text, calculate Gematria, and more. </p> <p>  \udb40\udc20\udb40\udc20  </p> <p>Documentation: https://hebrew.aviperl.me/</p> <p>Repository: https://github.com/avi-perl/hebrew</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install hebrew\n</code></pre>"},{"location":"#example","title":"Example","text":"<p><code>Hebrew</code> assists in working with Hebrew text by providing methods to handle the text according to user-perceived characteristics. Additionally, methods for common Hebrew text processing are provided.</p> <pre><code>from hebrew import Hebrew\nfrom hebrew.chars import HebrewChar, ALEPH\n\nhs = Hebrew('\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea')\nprint(list(hs.graphemes))  # ['\u05d1\u05bc\u05b0', '\u05e8\u05b5', '\u05d0', '\u05e9\u05c1\u05b4\u0596', '\u05d9', '\u05ea']\nprint(hs.text_only())  # \u05d1\u05e8\u05d0\u05e9\u05d9\u05ea\n\nprint(ALEPH)  # HebrewChar(char='\u05d0', name='Aleph', hebrew_name='\u05d0\u05b8\u05dc\u05b6\u05e3', name_alts=['Alef'], hebrew_name_alts=None, final_letter=False)\n\nprint(HebrewChar.search('bet'))  # HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', name_alts=None, hebrew_name_alts=None, final_letter=False)\n</code></pre>"},{"location":"#gematria","title":"Gematria","text":"<p>The <code>Hebrew</code> class includes a <code>gematria</code> function that can return a value for 23 different variations of Gematria!</p> <pre><code>from hebrew import Hebrew\nfrom hebrew import GematriaTypes\n\nhs = Hebrew(':\u05de\u05d5\u05b9\u05d3\u05b6\u05d4 \u05d0\u05b2\u05e0\u05b4\u05d9 \u05dc\u05b0\u05e4\u05b8\u05e0\u05b6\u05bd\u05d9\u05da\u05b8 \u05de\u05b6\u05bd\u05dc\u05b6\u05da\u05b0 \u05d7\u05b7\u05d9 \u05d5\u05b0\u05e7\u05b7\u05d9\u05bc\u05b8\u05dd \u05e9\u05c1\u05b6\u05d4\u05b6\u05d7\u05b1\u05d6\u05b7\u05bd\u05e8\u05b0\u05ea\u05bc\u05b8 \u05d1\u05bc\u05b4\u05d9 \u05e0\u05b4\u05e9\u05c1\u05b0\u05de\u05b8\u05ea\u05b4\u05d9 \u05d1\u05bc\u05b0\u05d7\u05b6\u05de\u05b0\u05dc\u05b8\u05d4, \u05e8\u05b7\u05d1\u05bc\u05b8\u05d4 \u05d0\u05b1\u05de\u05d5\u05bc\u05e0\u05b8\u05ea\u05b6\u05bd\u05da\u05b8')\n\nassert hs.gematria() == 3111\nassert hs.gematria(GematriaTypes.MISPAR_GADOL) == 5111\n</code></pre> <p>Messy inputs, such as strings with english text mixed in, is supported. However, do be careful to work with sanitized strings as much as possible.</p> <pre><code>from hebrew import Hebrew\n\nhs1 = Hebrew(\n    '''\n    Text:          \":\u05de\u05d5\u05b9\u05d3\u05b6\u05d4 \u05d0\u05b2\u05e0\u05b4\u05d9 \u05dc\u05b0\u05e4\u05b8\u05e0\u05b6\u05bd\u05d9\u05da\u05b8 \u05de\u05b6\u05bd\u05dc\u05b6\u05da\u05b0 \u05d7\u05b7\u05d9 \u05d5\u05b0\u05e7\u05b7\u05d9\u05bc\u05b8\u05dd \u05e9\u05c1\u05b6\u05d4\u05b6\u05d7\u05b1\u05d6\u05b7\u05bd\u05e8\u05b0\u05ea\u05bc\u05b8 \u05d1\u05bc\u05b4\u05d9 \u05e0\u05b4\u05e9\u05c1\u05b0\u05de\u05b8\u05ea\u05b4\u05d9 \u05d1\u05bc\u05b0\u05d7\u05b6\u05de\u05b0\u05dc\u05b8\u05d4, \u05e8\u05b7\u05d1\u05bc\u05b8\u05d4 \u05d0\u05b1\u05de\u05d5\u05bc\u05e0\u05b8\u05ea\u05b6\u05bd\u05da\u05b8\"\n    Translation:   \"I give thanks to You living and everlasting King for You have restored my soul with mercy. Great is Your faithfulness.\"\n    '''\n)\nhs2 = Hebrew(':\u05de\u05d5\u05b9\u05d3\u05b6\u05d4 \u05d0\u05b2\u05e0\u05b4\u05d9 \u05dc\u05b0\u05e4\u05b8\u05e0\u05b6\u05bd\u05d9\u05da\u05b8 \u05de\u05b6\u05bd\u05dc\u05b6\u05da\u05b0 \u05d7\u05b7\u05d9 \u05d5\u05b0\u05e7\u05b7\u05d9\u05bc\u05b8\u05dd \u05e9\u05c1\u05b6\u05d4\u05b6\u05d7\u05b1\u05d6\u05b7\u05bd\u05e8\u05b0\u05ea\u05bc\u05b8 \u05d1\u05bc\u05b4\u05d9 \u05e0\u05b4\u05e9\u05c1\u05b0\u05de\u05b8\u05ea\u05b4\u05d9 \u05d1\u05bc\u05b0\u05d7\u05b6\u05de\u05b0\u05dc\u05b8\u05d4, \u05e8\u05b7\u05d1\u05bc\u05b8\u05d4 \u05d0\u05b1\u05de\u05d5\u05bc\u05e0\u05b8\u05ea\u05b6\u05bd\u05da\u05b8')\n\nassert hs1.gematria() ==  hs2.gematria()  # 2701\n</code></pre> <p>Major kudos goes to TorahCalc whose calculator and explanations were critical to the development of this feature.</p>"},{"location":"#numerical-conversions","title":"Numerical Conversions","text":"<p>You can create a Hebrew object that represents a number using the <code>from_number</code> method. This is handy for displaying numbers in Hebrew form.</p> <pre><code>from hebrew import Hebrew\n\nhs1 = Hebrew.from_number(2)\nassert hs1.string == \"\u05d1\u05f3\"\n\n# Add an apostrophe instead of the unicode geresh\nhs2 = Hebrew.from_number(2, geresh=False)\nassert hs2.string == \"\u05d1'\"\n\n# Do not add punctuation\nhs2 = Hebrew.from_number(2, punctuate=False)\nassert hs2.string == '\u05d1'\n</code></pre>"},{"location":"#character-normalization","title":"Character Normalization","text":"<p>Hidden among hebrew text can be special characters that are visually identical humans, but are made up of different  unicode characters. However, this can cause issues with presentation when there is no support for these characters.</p> <p></p> <p>In this case, the first letter is made up of 2 unicode characters, sin with a dot and qamatz. The issue here is the sin. By normalizing the sin with a dot to 2 unicode  characters, \u05e9 and the dot, the display  will look right!</p> <p></p> <p>To normalize content, use the <code>Hebrew.normalize</code> function:</p> <pre><code>from hebrew import Hebrew\n\nhs = Hebrew('\ufb2b\u05b8\u05d7\u05b7\u05e7\u05b0\ufb4a\u05b4\u05d9 \ufb3b\u05b0\u05de\ufb4b')\n\nassert len(hs.string) == 14\nassert len(hs.normalize().string) == 18\n</code></pre>"},{"location":"#normalizing-yiddish","title":"Normalizing Yiddish","text":"<p>By default, special yiddish characters such as \u05f2 (double Yod) are not normalized. However, \ufb1f (double Yod with a Patah) will be converted to \u05f2\u05b7.</p> <p>To fully \"normalize\" yiddish characters, pass <code>True</code> to <code>normalize</code>.</p>"},{"location":"#grapheme-characters","title":"Grapheme Characters","text":"<p>Hebrew text comes in different forms, depending on the context. Hebrew text may appear with Niqqudot \"a system of diacritical signs used to represent vowels or distinguish between alternative pronunciations of letters of the Hebrew alphabet\". ^1 Additionally, Hebrew text may appear with extensive punctuation characters that connect words, separate them, and cantillation marks \"used as a guide for chanting the text, either from the printed text or, in the case of the public reading of the Torah\" ^2.</p> <p>Because of the above, from the perspective of a hebrew reader, the following 3 words are the same:</p> <ol> <li>\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea</li> <li>\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u05d9\u05ea</li> <li>\u05d1\u05e8\u05d0\u05e9\u05d9\u05ea</li> </ol> <p>However, as a unicode string, they are entirely different because of the additional characters.</p> <pre><code>assert len(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\") == 12\nassert len(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u05d9\u05ea\") == 11\nassert len(\"\u05d1\u05e8\u05d0\u05e9\u05d9\u05ea\") == 6\n</code></pre> <p>This impacts the user is a number of other ways. For example, if I want to get the root of this hebrew word using a slice: Expected: <code>\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea</code></p> <pre><code>he = \"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\"\nassert he[-5:] == '\u05c1\u05b4\u0596\u05d9\u05ea'\n</code></pre> <p>The solution to this is to handle the unicode string as a list of grapheme^3 characters, where each letter and its accompanying characters are treated as a single unit.</p>"},{"location":"#working-with-grapheme-characters","title":"Working with Grapheme Characters","text":"<p>Using the grapheme library for python, we can work with the grapheme characters as units. This allows us to get the right number of characters, slice the string correctly, and more.</p> <pre><code>import grapheme\n\nassert grapheme.length(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\") == 6\nassert grapheme.slice(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\", start=1, end=6) == '\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea'\n</code></pre> <p>This library includes 2 classes. <code>GraphemeString</code> is a class that supports all the functions made available by <code>grapheme</code>. The 2nd class <code>Hebrew</code> subclasses <code>GraphemeString</code> and adds methods for handling Hebrew text. This allows us to interact with the text like so:</p> <pre><code>from hebrew import Hebrew\n\nv2 = Hebrew('\u05de\u05d5\u05b9\u05d3\u05b6\u05d4 \u05d0\u05b2\u05e0\u05b4\u05d9 \u05dc\u05b0\u05e4\u05b8\u05e0\u05b6\u05bd\u05d9\u05da\u05b8')\nprint(v2.no_taamim())\nassert v2.no_taamim().string == '\u05de\u05d5\u05b9\u05d3\u05b6\u05d4 \u05d0\u05b2\u05e0\u05b4\u05d9 \u05dc\u05b0\u05e4\u05b8\u05e0\u05b6\u05d9\u05da\u05b8'\nassert v2.text_only().string == '\u05de\u05d5\u05d3\u05d4 \u05d0\u05e0\u05d9 \u05dc\u05e4\u05e0\u05d9\u05da'\n\nassert v2.length == 14\nassert v2.words() == [Hebrew('\u05de\u05d5\u05b9\u05d3\u05b6\u05d4'), Hebrew('\u05d0\u05b2\u05e0\u05b4\u05d9'), Hebrew('\u05dc\u05b0\u05e4\u05b8\u05e0\u05b6\u05bd\u05d9\u05da\u05b8')]\n</code></pre> <p>The text in these examples and used in testing were sourced from Sefaria.</p>"},{"location":"#hebrewchars-and-character-constants","title":"<code>hebrew.chars</code> and Character Constants","text":"<p><code>hebrew.Chars</code> contains constants for every letter as well as lists by character category's. Each value is an instance of a class that represents a character in the Hebrew character set with relevant properties. Since this library seeks to support the use of the Hebrew language in the way it is used, characters such as \"\u05d1\u05bc\" can be located (<code>BET</code>) even though, strictly speaking, \"\u05d1\u05bc\" is not part of the hebrew alphabet; it is a Hebrew letter plus a dot.</p> <pre><code>from hebrew.chars import FINAL_LETTERS, YIDDISH_CHARS, TSADI\n\nprint(TSADI)  # HebrewChar(char='\u05e6', name='Tsadi', hebrew_name='\u05e6\u05b7\u05d3\u05b4\u05d9', name_alts=['Tzadik'], hebrew_name_alts=['\u05e6\u05d3\u05d9\u05e7'], final_letter=False)\n\nassert {c.name: c.char for c in FINAL_LETTERS} == {'Chaf Sofit': '\u05da', 'Mem Sofit': '\u05dd', 'Nun Sofit': '\u05df', 'Fe Sofit': '\u05e3', 'Tsadi Sofit': '\u05e5'}\n\nassert [c.char for c in YIDDISH_CHARS] == ['\u05f2', '\u05f0', '\u05f1']\n</code></pre> <p>A letter can be retrieved using the <code>CHARS</code> dict; A dict of all instances of all supported Char types where the key is the char and the value is an instance of BaseHebrewChar.</p> <pre><code>from hebrew.chars import CHARS\n\nprint(CHARS.get('\u05d1\u05bc'))  # HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', name_alts=None, hebrew_name_alts=None, final_letter=False)\n</code></pre> <p>Search is also supported so that letters can be retrieved by their name.</p> <pre><code>from hebrew.chars import HebrewChar\n\nprint(HebrewChar.search('bet'))  # HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', name_alts=None, hebrew_name_alts=None, final_letter=False)\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions in the form of pull requests are very welcome! I'm sure many more helpful methods related to hebrew text could be helpful. More information and instructions for contributing can be found here.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#081-2023-12-11","title":"[0.8.1] - 2023-12-11","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Corrected an issue with subclasses of <code>BaseHebrewChar</code> where use of <code>__eq__</code> would break when the type for the    comparison was not the same as itself.</li> </ul>"},{"location":"changelog/#080-2023-12-10","title":"[0.8.0] - 2023-12-10","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Added <code>Hebrew.normalize</code>, a function for normalizing the hebrew characters in a string. This is typically needed with  text includes special hebrew characters.</li> </ul> <p>Hidden among hebrew text can be special characters that are visually identical humans, but are made up of different    unicode characters. However, this can cause issues with presentation when there is no support for these characters.</p> <p></p> <p>In this case, the first letter is made up of 2 unicode characters, sin with a dot   and qamatz. The issue here is the sin. By normalizing the sin with a dot to 2 unicode    characters, \u05e9 and the dot, the display    will look right!</p> <p></p> <p>To normalize content, use the <code>Hebrew.normalize</code> function:   ```python   from hebrew import Hebrew</p> <p>hs = Hebrew('\ufb2b\u05b8\u05d7\u05b7\u05e7\u05b0\ufb4a\u05b4\u05d9 \ufb3b\u05b0\u05de\ufb4b')</p> <p>assert len(hs.string) == 14   assert len(hs.normalize().string) == 18   ```</p> <p>### Normalizing Yiddish</p> <p>By default, special yiddish characters such as \u05f2 (double Yod) are not normalized.   However, \ufb1f (double Yod with a Patah) will be converted to \u05f2\u05b7.</p> <p>To fully \"normalize\" yiddish characters, pass <code>True</code> to <code>normalize</code>.</p>"},{"location":"changelog/#070-2023-12-10","title":"[0.7.0] - 2023-12-10","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>New function <code>Hebrew.from_number</code> converts an int into its hebrew form</li> </ul>"},{"location":"changelog/#example","title":"Example:","text":"<pre><code>from hebrew import Hebrew\n\nhs1 = Hebrew.from_number(2)\nprint(hs1)  # \u05d1\u05f3\n\n# Do not add punctuation\nhs2 = Hebrew.from_number(2, geresh=False)\nprint(hs2)  # \u05d1\n</code></pre>"},{"location":"changelog/#062-2023-12-08","title":"[0.6.2] - 2023-12-08","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Added 3.12 as a supported version</li> <li>Updated project dependencies.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Removed 3.11 as a supported version</li> </ul>"},{"location":"changelog/#061-2022-10-28","title":"[0.6.1] - 2022-10-28","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Added 3.11 as a supported version</li> </ul>"},{"location":"changelog/#060-2022-04-19","title":"[0.6.0] - 2022-04-19","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added the remaining missing Gematria methods. The complete list of supported methods is: </li> <li><code>ACHAS_BETA</code></li> <li><code>ALBAM</code></li> <li><code>ATBASH</code></li> <li><code>AVGAD</code></li> <li><code>AYAK_BACHAR</code></li> <li><code>MISPAR_BONEEH</code></li> <li><code>MISPAR_GADOL</code></li> <li><code>MISPAR_HAACHOR</code></li> <li><code>MISPAR_HAMERUBAH_HAKLALI</code></li> <li><code>MISPAR_HECHRACHI</code></li> <li><code>MISPAR_KATAN</code></li> <li><code>MISPAR_KATAN_MISPARI</code></li> <li><code>MISPAR_KIDMI</code></li> <li><code>MISPAR_KOLEL</code></li> <li><code>MISPAR_MESHULASH</code></li> <li><code>MISPAR_MISPARI</code></li> <li><code>MISPAR_MUSAFI</code></li> <li><code>MISPAR_NEELAM</code></li> <li><code>MISPAR_PERATI</code></li> <li><code>MISPAR_SHEMI_MILUI</code></li> <li><code>MISPAR_SIDURI</code></li> <li><code>OFANIM</code></li> <li><code>REVERSE_AVGAD</code></li> </ul> <p>### Example:   ```python   from hebrew import Hebrew   from hebrew import GematriaTypes</p> <p>hs = Hebrew('\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea \u05d1\u05bc\u05b8\u05e8\u05b8\u05a3\u05d0 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u0591\u05d9\u05dd \u05d0\u05b5\u05a5\u05ea \u05d4\u05b7\u05e9\u05c1\u05bc\u05b8\u05de\u05b7\u0596\u05d9\u05b4\u05dd \u05d5\u05b0\u05d0\u05b5\u05a5\u05ea \u05d4\u05b8\u05d0\u05b8\u05bd\u05e8\u05b6\u05e5\u05c3')</p> <p>print(hs.gematria())  # 2701   print(hs.gematria(GematriaTypes.MISPAR_GADOL))  # 4631   ```</p>"},{"location":"changelog/#058-2022-04-18","title":"[0.5.8] - 2022-04-18","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Added Gematria methods <code>MISPAR_MUSAFI</code>. This is the first of the complex Gematria types that goes deeper than just  adding up values assigned to each letter, necessitating internal changes to the <code>Hebrew</code> class.</li> </ul>"},{"location":"changelog/#057-2022-04-18","title":"[0.5.7] - 2022-04-18","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Added Gematria methods <code>MISPAR_KATAN</code>, <code>MISPAR_PERATI</code>, <code>ATBASH</code>, <code>ALBAM</code>, <code>MISPAR_MESHULASH</code>.</li> </ul>"},{"location":"changelog/#056-2022-04-18","title":"[0.5.6] - 2022-04-18","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Added a new gematria method, <code>MISPAR_SIDURI</code>.</li> </ul>"},{"location":"changelog/#055-2021-11-22","title":"[0.5.5] - 2021-11-22","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Added a new gematria method, <code>MISPAR_GADOL</code>. A contribution by Taber Andrew Bain</li> </ul>"},{"location":"changelog/#054-2021-11-21","title":"[0.5.4] - 2021-11-21","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed an issue where <code>Hebrew.gematria</code> would through an error if the input string had no hebrew characters.   In this case, we now return a value of 0.</li> </ul>"},{"location":"changelog/#053-2021-11-15","title":"[0.5.3] - 2021-11-15","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Split the <code>PunctuationChar</code> type chars into <code>TaamimChar</code> and <code>OtherChar</code> types in <code>hebrew.char</code>.</li> <li>Renamed the <code>no_punctuation</code> method of <code>Hebrew</code> to <code>no_taamim</code>.</li> </ul>"},{"location":"changelog/#050-2021-11-14","title":"[0.5.0] - 2021-11-14","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Added the method <code>Hebrew.gematria</code> method for calculating the gematria of a string.</li> <li>Added <code>mispar_hechrachi</code> as a supported gematria type.</li> </ul> <pre><code>&gt;&gt;&gt; from hebrew import Hebrew\n&gt;&gt;&gt; from hebrew.gematria import GematriaTypes\n\n&gt;&gt;&gt; Hebrew(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea \u05d1\u05bc\u05b8\u05e8\u05b8\u05a3\u05d0 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u0591\u05d9\u05dd \u05d0\u05b5\u05a5\u05ea \u05d4\u05b7\u05e9\u05c1\u05bc\u05b8\u05de\u05b7\u0596\u05d9\u05b4\u05dd \u05d5\u05b0\u05d0\u05b5\u05a5\u05ea \u05d4\u05b8\u05d0\u05b8\u05e8\u05b6\u05e5\u05c3\").gematria(GematriaTypes.MISPAR_HECHRACHI)\n2701\n</code></pre>"},{"location":"changelog/#040-2021-11-14","title":"[0.4.0] - 2021-11-14","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Added <code>hebrew.chars</code> with constants for Hebrew characters and classes to represent each letter.</li> <li>Moved constants out of <code>Hebrew</code> and into <code>hebrew.chars</code>.</li> <li>Constant values, previously strings, are now instances of a class with metadata for each letter.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Support for Python 3.6 was removed because we are now using <code>@dataclasse</code>. It is possible to make this work with   3.6 but I am choosing not to at this time. If this is a problem for you, feel free to open an issue.</li> </ul>"},{"location":"changelog/#030-2021-11-08","title":"[0.3.0] - 2021-11-08","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Renamed the python package from <code>hebrewstring</code> to <code>hebrew</code>.</li> </ul>"},{"location":"changelog/#020-2021-11-07","title":"[0.2.0] - 2021-11-07","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Added the <code>__eq__</code> method to the <code>GraphemeString</code> object.</li> </ul> <p>This is to support the <code>==</code> operator when comparing two <code>GraphemeString</code> objects.</p> <ul> <li>Added the <code>__add__</code> method to the <code>GraphemeString</code> object.</li> </ul> <p>This is to support the <code>+</code> operator when adding two <code>GraphemeString</code> objects together.</p> <ul> <li>Added the <code>__hash__</code> method to the <code>GraphemeString</code> object.</li> </ul> <p>This is to support the <code>hash()</code> function for a <code>GraphemeString</code> instance and allows it (as an example) to be used as   a <code>dict</code> key.</p>"},{"location":"changelog/#012-2021-11-07","title":"[0.1.2] - 2021-11-07","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Added base code, tests, and examples for the first release.</li> </ul>"},{"location":"contributing/","title":"Contributing to <code>Hebrew</code>","text":"<p>This project welcomes contributions in the form of Pull Requests. For clear bug-fixes / typos etc. just submit a PR. For new features or if there is any doubt in how to fix a bug, you might want to open an issue prior to starting work.</p>"},{"location":"contributing/#development-environment","title":"Development Environment","text":"<p>Hebrew uses poetry for packaging and dependency management. To start developing with Hebrew, install Poetry using the recommended method or run:</p> <pre><code>pip install poetry\n</code></pre> <p>Once Poetry is installed, install the dependencies with the following command:</p> <pre><code>poetry install --with=dev\n</code></pre>"},{"location":"contributing/#tests","title":"Tests","text":"<p>Run tests with the following command:</p> <pre><code>poetry run pytest --codeblocks\n</code></pre> <p>The <code>--codeblocks</code> flag runs tests on the python code blocks found in markdown files and is critical to testing!</p> <p>New code should ideally have tests and not break existing tests.</p> <p>If you are not familiar with writing tests but still want to contribute to this package, please feel free to submit your pull request, and I will work on tests. \ud83d\ude42</p>"},{"location":"contributing/#type-checking","title":"Type Checking","text":"<p>Please add type annotations for all new code.</p>"},{"location":"contributing/#code-formatting","title":"Code Formatting","text":"<p>This repo uses <code>black</code> for code formatting. I recommend setting up black in your editor to format on save.</p> <p>To run black from the command line:</p> <pre><code>black &lt;path-to-files-changed&gt;\n</code></pre>"},{"location":"license/","title":"License","text":"<p>Copyright 2021 Avrohom Perl</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"code_reference/gematria/","title":"Gematria","text":""},{"location":"code_reference/gematria/#hebrew.gematria.ACHAS_BETA","title":"<code>ACHAS_BETA: Dict[str, int] = {'\u05d0': 8, '\u05d1': 9, '\u05d2': 10, '\u05d3': 20, '\u05d4': 30, '\u05d5': 40, '\u05d6': 50, '\u05d7': 60, '\u05d8': 70, '\u05d9': 80, '\u05db': 90, '\u05da': 90, '\u05dc': 100, '\u05de': 200, '\u05dd': 200, '\u05e0': 300, '\u05df': 300, '\u05e1': 1, '\u05e2': 2, '\u05e4': 3, '\u05e3': 3, '\u05e6': 4, '\u05e5': 4, '\u05e7': 5, '\u05e8': 6, '\u05e9': 7, '\u05ea': 400}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the Avgad gematria method as its value. This method replaces each letter with the next one. (ex. \"Aleph\" becomes \"Beis\", \"Beis\"  becomes \"Gimmel\", \"Tav\" becomes \"Aleph\").</p>"},{"location":"code_reference/gematria/#hebrew.gematria.ALBAM","title":"<code>ALBAM: Dict[str, int] = {'\u05d0': 30, '\u05d1': 40, '\u05d2': 50, '\u05d3': 60, '\u05d4': 70, '\u05d5': 80, '\u05d6': 90, '\u05d7': 100, '\u05d8': 200, '\u05d9': 300, '\u05db': 400, '\u05da': 400, '\u05dc': 1, '\u05de': 2, '\u05dd': 2, '\u05e0': 3, '\u05df': 3, '\u05e1': 4, '\u05e2': 5, '\u05e4': 6, '\u05e3': 6, '\u05e6': 7, '\u05e5': 7, '\u05e7': 8, '\u05e8': 9, '\u05e9': 10, '\u05ea': 20}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the AtBash gematria method as its value. This method splits the alphabet in half and letters from the first half switch  values with letters from the second half. (ex. \"Aleph\" switches values with \"Lamed\", \"Beis\" switches values with \"Mem\").</p>"},{"location":"code_reference/gematria/#hebrew.gematria.ATBASH","title":"<code>ATBASH: Dict[str, int] = {'\u05d0': 400, '\u05d1': 300, '\u05d2': 200, '\u05d3': 100, '\u05d4': 90, '\u05d5': 80, '\u05d6': 70, '\u05d7': 60, '\u05d8': 50, '\u05d9': 40, '\u05db': 30, '\u05da': 30, '\u05dc': 20, '\u05de': 10, '\u05dd': 10, '\u05e0': 9, '\u05df': 9, '\u05e1': 8, '\u05e2': 7, '\u05e4': 6, '\u05e3': 6, '\u05e6': 5, '\u05e5': 5, '\u05e7': 4, '\u05e8': 3, '\u05e9': 2, '\u05ea': 1}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the AlBam gematria method as its value. This method splits the alphabet in half and letters from the first half switch  values with letters from the second half. (ex. \"Aleph\" switches values with \"Lamed\", \"Beis\" switches values with \"Mem\").</p>"},{"location":"code_reference/gematria/#hebrew.gematria.AVGAD","title":"<code>AVGAD: Dict[str, int] = {'\u05d0': 2, '\u05d1': 3, '\u05d2': 4, '\u05d3': 5, '\u05d4': 6, '\u05d5': 7, '\u05d6': 8, '\u05d7': 9, '\u05d8': 10, '\u05d9': 20, '\u05db': 30, '\u05da': 30, '\u05dc': 40, '\u05de': 50, '\u05dd': 50, '\u05e0': 60, '\u05df': 60, '\u05e1': 70, '\u05e2': 80, '\u05e4': 90, '\u05e3': 90, '\u05e6': 100, '\u05e5': 100, '\u05e7': 200, '\u05e8': 300, '\u05e9': 400, '\u05ea': 1}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the Reverse Avgad gematria method as its value. This method replaces each letter with the previous one. (ex. \"Beis\" becomes \"Aleph\",  \"Gimmel\" becomes \"Beis\", \"Aleph\" becomes \"Tav\").</p>"},{"location":"code_reference/gematria/#hebrew.gematria.AYAK_BACHAR","title":"<code>AYAK_BACHAR: Dict[str, int] = {'\u05d0': 10, '\u05d1': 20, '\u05d2': 30, '\u05d3': 40, '\u05d4': 50, '\u05d5': 60, '\u05d6': 70, '\u05d7': 80, '\u05d8': 90, '\u05d9': 100, '\u05db': 200, '\u05da': 5, '\u05dc': 300, '\u05de': 400, '\u05dd': 6, '\u05e0': 500, '\u05df': 7, '\u05e1': 600, '\u05e2': 700, '\u05e4': 800, '\u05e3': 8, '\u05e6': 900, '\u05e5': 9, '\u05e7': 1, '\u05e8': 2, '\u05e9': 3, '\u05ea': 4}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the Ofanim  gematria method as its value. This method replaces each letter with the last letter of its name. (ex. \"Aleph\" becomes  \"Fey\", \"Beis\" becomes \"Tav\").</p>"},{"location":"code_reference/gematria/#hebrew.gematria.MISPAR_GADOL","title":"<code>MISPAR_GADOL: Dict[str, int] = {'\u05d0': 1, '\u05d1': 2, '\u05d2': 3, '\u05d3': 4, '\u05d4': 5, '\u05d5': 6, '\u05d6': 7, '\u05d7': 8, '\u05d8': 9, '\u05d9': 10, '\u05db': 20, '\u05da': 500, '\u05dc': 30, '\u05de': 40, '\u05dd': 600, '\u05e0': 50, '\u05df': 700, '\u05e1': 60, '\u05e2': 70, '\u05e4': 80, '\u05e3': 800, '\u05e6': 90, '\u05e5': 900, '\u05e7': 100, '\u05e8': 200, '\u05e9': 300, '\u05ea': 400}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the mispar_siduri gematria method as its value. This method assigns each letter a number from 1 to 22 in the order of the alphabet.</p>"},{"location":"code_reference/gematria/#hebrew.gematria.MISPAR_HECHRACHI","title":"<code>MISPAR_HECHRACHI: Dict[str, int] = {'\u05d0': 1, '\u05d1': 2, '\u05d2': 3, '\u05d3': 4, '\u05d4': 5, '\u05d5': 6, '\u05d6': 7, '\u05d7': 8, '\u05d8': 9, '\u05d9': 10, '\u05db': 20, '\u05da': 20, '\u05dc': 30, '\u05de': 40, '\u05dd': 40, '\u05e0': 50, '\u05df': 50, '\u05e1': 60, '\u05e2': 70, '\u05e4': 80, '\u05e3': 80, '\u05e6': 90, '\u05e5': 90, '\u05e7': 100, '\u05e8': 200, '\u05e9': 300, '\u05ea': 400}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the mispar_gadol gematria method as its value. Non-final letter values are all the same, but final kaf/chaf, mem, nun, pe/fe are moved to the end of the alphabet and continue on from where tav left off</p>"},{"location":"code_reference/gematria/#hebrew.gematria.MISPAR_KATAN","title":"<code>MISPAR_KATAN: Dict[str, int] = {'\u05d0': 1, '\u05d1': 2, '\u05d2': 3, '\u05d3': 4, '\u05d4': 5, '\u05d5': 6, '\u05d6': 7, '\u05d7': 8, '\u05d8': 9, '\u05d9': 1, '\u05db': 2, '\u05da': 2, '\u05dc': 3, '\u05de': 4, '\u05dd': 4, '\u05e0': 5, '\u05df': 5, '\u05e1': 6, '\u05e2': 7, '\u05e4': 8, '\u05e3': 8, '\u05e6': 9, '\u05e5': 9, '\u05e7': 1, '\u05e8': 2, '\u05e9': 3, '\u05ea': 4}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the mispar_perati gematria method as its value. This method assigns each letter its standard value squared. (ex. \"Aleph\" = 1 x 1 = 1, \"Beis\" = 2 x 2 = 4).</p>"},{"location":"code_reference/gematria/#hebrew.gematria.MISPAR_KIDMI","title":"<code>MISPAR_KIDMI: Dict[str, int] = {'\u05d0': 1, '\u05d1': 3, '\u05d2': 6, '\u05d3': 10, '\u05d4': 15, '\u05d5': 21, '\u05d6': 28, '\u05d7': 36, '\u05d8': 45, '\u05d9': 55, '\u05db': 75, '\u05da': 75, '\u05dc': 105, '\u05de': 145, '\u05dd': 145, '\u05e0': 195, '\u05df': 195, '\u05e1': 255, '\u05e2': 325, '\u05e4': 405, '\u05e3': 405, '\u05e6': 495, '\u05e5': 495, '\u05e7': 595, '\u05e8': 795, '\u05e9': 1095, '\u05ea': 1495}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the Mispar Mispari gematria method as its value. This method spells out the Hebrew name of each of the letter's standard values and adds  up their values. (ex. \"Aleph\" = one (Echad) = 1 + 8 + 4 = 13).</p>"},{"location":"code_reference/gematria/#hebrew.gematria.MISPAR_MESHULASH","title":"<code>MISPAR_MESHULASH: Dict[str, int] = {'\u05d0': 1, '\u05d1': 8, '\u05d2': 27, '\u05d3': 64, '\u05d4': 125, '\u05d5': 216, '\u05d6': 343, '\u05d7': 512, '\u05d8': 729, '\u05d9': 1000, '\u05db': 8000, '\u05da': 8000, '\u05dc': 27000, '\u05de': 64000, '\u05dd': 64000, '\u05e0': 125000, '\u05df': 125000, '\u05e1': 216000, '\u05e2': 343000, '\u05e4': 512000, '\u05e3': 512000, '\u05e6': 729000, '\u05e5': 729000, '\u05e7': 1000000, '\u05e8': 8000000, '\u05e9': 27000000, '\u05ea': 64000000}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the Mispar Kidmi gematria method as its value. This method adds the value of all preceding letters in the alphabet to each  letter's value. (ex. \"Aleph\" = 1, \"Beis\" = 1 + 2 = 3, \"Gimmel\" = 1 + 2 + 3 = 6).</p>"},{"location":"code_reference/gematria/#hebrew.gematria.MISPAR_MISPARI","title":"<code>MISPAR_MISPARI: Dict[str, int] = {'\u05d0': 13, '\u05d1': 760, '\u05d2': 636, '\u05d3': 273, '\u05d4': 348, '\u05d5': 600, '\u05d6': 372, '\u05d7': 401, '\u05d8': 770, '\u05d9': 570, '\u05db': 620, '\u05da': 620, '\u05dc': 686, '\u05de': 323, '\u05dd': 323, '\u05e0': 408, '\u05df': 408, '\u05e1': 660, '\u05e2': 422, '\u05e4': 446, '\u05e3': 446, '\u05e6': 820, '\u05e5': 820, '\u05e7': 46, '\u05e8': 501, '\u05e9': 1083, '\u05ea': 720}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the Ayak Bachar  (or Ayak Bakar) gematria method as its value. This method splits the alphabet into three groups of nine with the final  (sofit) letters at the end. The letters in the first group replace the ones in the second group, the letters in the  second group replace the ones in the third group, and the letters in the third group replace the ones in  the first group. (ex. \"Aleph\" takes the place of \"Yud\", \"Yud\" takes the place of \"Kuf\",  \"Kuf\" takes the place of \"Aleph\", \"Beis\" takes the place of \"Chaf\" etc.).</p>"},{"location":"code_reference/gematria/#hebrew.gematria.MISPAR_PERATI","title":"<code>MISPAR_PERATI: Dict[str, int] = {'\u05d0': 1, '\u05d1': 4, '\u05d2': 9, '\u05d3': 16, '\u05d4': 25, '\u05d5': 36, '\u05d6': 49, '\u05d7': 64, '\u05d8': 81, '\u05d9': 100, '\u05db': 400, '\u05da': 400, '\u05dc': 900, '\u05de': 1600, '\u05dd': 1600, '\u05e0': 2500, '\u05df': 2500, '\u05e1': 3600, '\u05e2': 4900, '\u05e4': 6400, '\u05e3': 6400, '\u05e6': 8100, '\u05e5': 8100, '\u05e7': 10000, '\u05e8': 40000, '\u05e9': 90000, '\u05ea': 160000}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the AtBash gematria method as its value. This method exchanges each letter's value for its opposite letter's value.  (ex. \"Aleph\" switches values with \"Tav\", \"Beis\" switches values with \"Shin\").</p>"},{"location":"code_reference/gematria/#hebrew.gematria.MISPAR_SIDURI","title":"<code>MISPAR_SIDURI: Dict[str, int] = {'\u05d0': 1, '\u05d1': 2, '\u05d2': 3, '\u05d3': 4, '\u05d4': 5, '\u05d5': 6, '\u05d6': 7, '\u05d7': 8, '\u05d8': 9, '\u05d9': 10, '\u05db': 11, '\u05da': 23, '\u05dc': 12, '\u05de': 13, '\u05dd': 24, '\u05e0': 14, '\u05df': 25, '\u05e1': 15, '\u05e2': 16, '\u05e4': 17, '\u05e3': 26, '\u05e6': 18, '\u05e5': 27, '\u05e7': 19, '\u05e8': 20, '\u05e9': 21, '\u05ea': 22}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the mispar_katan gematria method as its value. This method uses the value of the letters but without the zeros after large numbers.  (ex. \"Yud\" is 1 instead of 10, \"Tav\" is 4 instead of 400).</p>"},{"location":"code_reference/gematria/#hebrew.gematria.OFANIM","title":"<code>OFANIM: Dict[str, int] = {'\u05d0': 80, '\u05d1': 400, '\u05d2': 30, '\u05d3': 400, '\u05d4': 1, '\u05d5': 6, '\u05d6': 50, '\u05d7': 400, '\u05d8': 400, '\u05d9': 4, '\u05db': 80, '\u05da': 80, '\u05dc': 4, '\u05de': 40, '\u05dd': 40, '\u05e0': 50, '\u05df': 50, '\u05e1': 20, '\u05e2': 50, '\u05e4': 1, '\u05e3': 1, '\u05e6': 10, '\u05e5': 10, '\u05e7': 80, '\u05e8': 300, '\u05e9': 50, '\u05ea': 6}</code>  <code>module-attribute</code>","text":"<p>A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the Ofanim  gematria method as its value. This method splits the alphabet into groups of 7, 7, and 8 letters.  The letters in the first group replace the ones in the second group, the letters in the second group replace  the ones in the third group, and the letters in the third group replace the ones in the first group. The letter \"Tav\"  does not change.</p>"},{"location":"code_reference/gematria/#hebrew.gematria.GematriaTypes","title":"<code>GematriaTypes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Types of Gematria supported in this library.</p> Source code in <code>hebrew/gematria.py</code> <pre><code>class GematriaTypes(Enum):\n    \"\"\"\n    Types of Gematria supported in this library.\n    \"\"\"\n\n    # Simple methods where the value is calculated off of a value map to each letter\n    MISPAR_HECHRACHI = \"mispar_hechrachi\"\n    MISPAR_GADOL = \"mispar_gadol\"\n    MISPAR_SIDURI = \"mispar_siduri\"\n    MISPAR_KATAN = \"mispar_katan\"\n    MISPAR_PERATI = \"mispar_perati\"\n    ATBASH = \"atbash\"\n    ALBAM = \"albam\"\n    MISPAR_MESHULASH = \"mispar_meshulash\"\n    MISPAR_KIDMI = \"mispar_kidmi\"\n    MISPAR_MISPARI = \"mispar_mispari\"\n    AYAK_BACHAR = \"ayak_bachar\"\n    AYAK_BAKAR = AYAK_BACHAR\n    OFANIM = \"ofanim\"\n    ACHAS_BETA = \"achas_beta\"\n    AVGAD = \"avgad\"\n    REVERSE_AVGAD = \"reverse_avgad\"\n\n    # Complex methods involving logic on top of MISPAR_HECHRACHI\n    MISPAR_MUSAFI = \"mispar_musafi\"\n    MISPAR_BONEEH = \"mispar_boneeh\"\n    MISPAR_HAMERUBAH_HAKLALI = \"mispar_hamerubah_haklali\"\n    MISPAR_HAACHOR = \"mispar_haachor\"\n    MISPAR_KATAN_MISPARI = \"mispar_katan_mispari\"\n    MISPAR_KOLEL = \"mispar_kolel\"\n    MISPAR_SHEMI_MILUI = \"mispar_shemi_milui\"\n    MISPAR_NEELAM = \"mispar_neelam\"\n</code></pre>"},{"location":"code_reference/grapheme_string/","title":"Grapheme string","text":""},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString","title":"<code>GraphemeString</code>","text":"<p>An object that unifies the functions available from the grapheme library under an object. Functions all work as they do in the grapheme library, this is simply an interface.</p> Source code in <code>hebrew/grapheme_string.py</code> <pre><code>class GraphemeString:\n    \"\"\"\n    An object that unifies the functions available from the grapheme library under an object.\n    Functions all work as they do in the grapheme library, this is simply an interface.\n    \"\"\"\n\n    UNICODE_VERSION: str = grapheme.UNICODE_VERSION\n\n    def __init__(self, string: str):\n        self.string = string\n\n    @property\n    def graphemes(self) -&gt; Iterator[GraphemeIterator]:\n        \"\"\"\n        Returns an iterator of all graphemes of given string.\n\n        ``` python\n        &gt;&gt;&gt; rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\"\n        &gt;&gt;&gt; [codepoint for codepoint in rainbow_flag]\n        ['\ud83c\udff3', '\ufe0f', '\\u200d', '\ud83c\udf08']\n        &gt;&gt;&gt; list(GraphemeString(\"multi codepoint grapheme: \" + rainbow_flag).graphemes)\n        ['m', 'u', 'l', 't', 'i', ' ', 'c', 'o', 'd', 'e', 'p', 'o', 'i', 'n', 't', ' ', 'g', 'r', 'a', 'p', 'h', 'e', 'm', 'e', ':', ' ', '\ud83c\udff3\ufe0f\u200d\ud83c\udf08']\n        ```\n        \"\"\"\n        return grapheme.graphemes(self.string)\n\n    @property\n    def length(self) -&gt; int:\n        \"\"\"\n        Returns the number of graphemes in the string.\n\n        Note that this functions needs to traverse the full string to calculate the length,\n        unlike `len(string)` and it's time consumption is linear to the length of the string\n        (up to the `until` value).\n\n        Only counts up to the `until` argument, if given. This is useful when testing\n        the length of a string against some limit and the excess length is not interesting.\n\n        ``` python\n        &gt;&gt;&gt; rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\"\n        &gt;&gt;&gt; len(rainbow_flag)\n        4\n        &gt;&gt;&gt; GraphemeString(rainbow_flag).length\n        1\n        ```\n        \"\"\"\n        return grapheme.length(self.string)\n\n    def get_length(self, until: int) -&gt; int:\n        \"\"\"\n        Returns the number of graphemes in the string.\n\n        Note that this functions needs to traverse the full string to calculate the length,\n        unlike `len(string)` and it's time consumption is linear to the length of the string\n        (up to the `until` value).\n\n        Only counts up to the `until` argument, if given. This is useful when testing\n        the length of a string against some limit and the excess length is not interesting.\n\n        ``` python\n        &gt;&gt;&gt; rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\"\n        &gt;&gt;&gt; len(rainbow_flag)\n        4\n        &gt;&gt;&gt; GraphemeString(rainbow_flag).length\n        1\n        &gt;&gt;&gt; GraphemeString(\"\".join(str(i) for i in range(100))).get_length(30)\n        30\n        ```\n        \"\"\"\n        return grapheme.length(self.string, until)\n\n    @property\n    def grapheme_lengths(self) -&gt; Iterator[int]:\n        \"\"\"\n        Returns an iterator of number of code points in each grapheme of the string.\n        \"\"\"\n        return grapheme.grapheme_lengths(self.string)\n\n    def slice(self, start: int = None, end: int = None) -&gt; str:\n        \"\"\"\n        Returns a substring of the given string, counting graphemes instead of codepoints.\n\n        Negative indices is currently not supported.\n\n        ``` python\n        &gt;&gt;&gt; string = \"tamil \u0ba8\u0bbf (ni)\"\n\n        &gt;&gt;&gt; string[:7]\n        'tamil \u0ba8'\n        &gt;&gt;&gt; GraphemeString(string).slice(end=7)\n        'tamil \u0ba8\u0bbf'\n        &gt;&gt;&gt; string[7:]\n        '\u0bbf (ni)'\n        &gt;&gt;&gt; GraphemeString(string).slice(start=7)\n        ' (ni)'\n        ```\n        \"\"\"\n        return grapheme.slice(self.string, start, end)\n\n    def contains(self, substring: str) -&gt; bool:\n        \"\"\"\n        Returns true if the sequence of graphemes in substring is also present in string.\n\n        This differs from the normal python `in` operator, since the python operator will return\n        true if the sequence of codepoints are withing the other string without considering\n        grapheme boundaries.\n\n        Performance notes: Very fast if `substring not in string`, since that also means that\n        the same graphemes can not be in the two strings. Otherwise this function has linear time\n        complexity in relation to the string length. It will traverse the sequence of graphemes until\n        a match is found, so it will generally perform better for grapheme sequences that match early.\n\n        ``` python\n        &gt;&gt;&gt; \"\ud83c\uddf8\ud83c\uddea\" in \"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\"\n        True\n        &gt;&gt;&gt; GraphemeString(\"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\").contains(\"\ud83c\uddf8\ud83c\uddea\")\n        False\n        ```\n        \"\"\"\n        return grapheme.contains(self.string, substring)\n\n    def safe_split_index(self, max_length: int) -&gt; int:\n        \"\"\"\n        Returns the highest index up to `max_len` at which the given string can be sliced, without breaking a grapheme.\n\n        This is useful for when you want to split or take a substring from a string, and don't really care about\n        the exact grapheme length, but don't want to risk breaking existing graphemes.\n\n        This function does normally not traverse the full grapheme sequence up to the given length, so it can be used\n        for arbitrarily long strings and high `max_len`s. However, some grapheme boundaries depend on the previous state,\n        so the worst case performance is O(n). In practice, it's only very long non-broken sequences of country flags\n        (represented as Regional Indicators) that will perform badly.\n\n        The return value will always be between `0` and `len(string)`.\n\n        ``` python\n        &gt;&gt;&gt; string = \"tamil \u0ba8\u0bbf (ni)\"\n        &gt;&gt;&gt; i = GraphemeString(string).safe_split_index(7)\n        &gt;&gt;&gt; i\n        6\n        &gt;&gt;&gt; string[:i]\n        'tamil '\n        &gt;&gt;&gt; string[i:]\n        '\u0ba8\u0bbf (ni)'\n        ```\n        \"\"\"\n        return grapheme.safe_split_index(self.string, max_length)\n\n    def startswith(self, prefix: str) -&gt; bool:\n        \"\"\"\n        Like str.startswith, but also checks that the string starts with the given prefixes sequence of graphemes.\n\n        str.startswith may return true for a prefix that is not visually represented as a prefix if a grapheme cluster\n        is continued after the prefix ends.\n\n        ``` python\n        &gt;&gt;&gt; GraphemeString(\"\u270a\ud83c\udffe\").startswith(\"\u270a\")\n        False\n        &gt;&gt;&gt; \"\u270a\ud83c\udffe\".startswith(\"\u270a\")\n        True\n        ```\n        \"\"\"\n        return grapheme.startswith(self.string, prefix)\n\n    def endswith(self, suffix: str) -&gt; bool:\n        \"\"\"\n        Like str.endswith, but also checks that the string ends with the given prefixes sequence of graphemes.\n\n        str.endswith may return true for a suffix that is not visually represented as a suffix if a grapheme cluster\n        is initiated before the suffix starts.\n\n        ``` python\n        &gt;&gt;&gt; GraphemeString(\"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\").endswith(\"\ud83c\udf08\")\n        False\n        &gt;&gt;&gt; \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\".endswith(\"\ud83c\udf08\")\n        True\n        ```\n        \"\"\"\n        return grapheme.endswith(self.string, suffix)\n\n    def __str__(self) -&gt; str:\n        return self.string\n\n    def __repr__(self) -&gt; str:\n        return self.__str__()\n\n    def __add__(self, other) -&gt; GraphemeStringT:\n        return GraphemeString(self.string + str(other))\n\n    def __key(self) -&gt; str:\n        return self.string\n\n    def __eq__(self, other) -&gt; bool:\n        if isinstance(other, GraphemeString):\n            return self.__key() == other.__key()\n        return False\n\n    def __hash__(self):\n        return hash(self.__key())\n</code></pre>"},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString.grapheme_lengths","title":"<code>grapheme_lengths: Iterator[int]</code>  <code>property</code>","text":"<p>Returns an iterator of number of code points in each grapheme of the string.</p>"},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString.graphemes","title":"<code>graphemes: Iterator[GraphemeIterator]</code>  <code>property</code>","text":"<p>Returns an iterator of all graphemes of given string.</p> <pre><code>&gt;&gt;&gt; rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\"\n&gt;&gt;&gt; [codepoint for codepoint in rainbow_flag]\n['\ud83c\udff3', '\ufe0f', '\u200d', '\ud83c\udf08']\n&gt;&gt;&gt; list(GraphemeString(\"multi codepoint grapheme: \" + rainbow_flag).graphemes)\n['m', 'u', 'l', 't', 'i', ' ', 'c', 'o', 'd', 'e', 'p', 'o', 'i', 'n', 't', ' ', 'g', 'r', 'a', 'p', 'h', 'e', 'm', 'e', ':', ' ', '\ud83c\udff3\ufe0f\u200d\ud83c\udf08']\n</code></pre>"},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString.length","title":"<code>length: int</code>  <code>property</code>","text":"<p>Returns the number of graphemes in the string.</p> <p>Note that this functions needs to traverse the full string to calculate the length, unlike <code>len(string)</code> and it's time consumption is linear to the length of the string (up to the <code>until</code> value).</p> <p>Only counts up to the <code>until</code> argument, if given. This is useful when testing the length of a string against some limit and the excess length is not interesting.</p> <pre><code>&gt;&gt;&gt; rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\"\n&gt;&gt;&gt; len(rainbow_flag)\n4\n&gt;&gt;&gt; GraphemeString(rainbow_flag).length\n1\n</code></pre>"},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString.contains","title":"<code>contains(substring)</code>","text":"<p>Returns true if the sequence of graphemes in substring is also present in string.</p> <p>This differs from the normal python <code>in</code> operator, since the python operator will return true if the sequence of codepoints are withing the other string without considering grapheme boundaries.</p> <p>Performance notes: Very fast if <code>substring not in string</code>, since that also means that the same graphemes can not be in the two strings. Otherwise this function has linear time complexity in relation to the string length. It will traverse the sequence of graphemes until a match is found, so it will generally perform better for grapheme sequences that match early.</p> <pre><code>&gt;&gt;&gt; \"\ud83c\uddf8\ud83c\uddea\" in \"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\"\nTrue\n&gt;&gt;&gt; GraphemeString(\"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\").contains(\"\ud83c\uddf8\ud83c\uddea\")\nFalse\n</code></pre> Source code in <code>hebrew/grapheme_string.py</code> <pre><code>def contains(self, substring: str) -&gt; bool:\n    \"\"\"\n    Returns true if the sequence of graphemes in substring is also present in string.\n\n    This differs from the normal python `in` operator, since the python operator will return\n    true if the sequence of codepoints are withing the other string without considering\n    grapheme boundaries.\n\n    Performance notes: Very fast if `substring not in string`, since that also means that\n    the same graphemes can not be in the two strings. Otherwise this function has linear time\n    complexity in relation to the string length. It will traverse the sequence of graphemes until\n    a match is found, so it will generally perform better for grapheme sequences that match early.\n\n    ``` python\n    &gt;&gt;&gt; \"\ud83c\uddf8\ud83c\uddea\" in \"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\"\n    True\n    &gt;&gt;&gt; GraphemeString(\"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\").contains(\"\ud83c\uddf8\ud83c\uddea\")\n    False\n    ```\n    \"\"\"\n    return grapheme.contains(self.string, substring)\n</code></pre>"},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString.endswith","title":"<code>endswith(suffix)</code>","text":"<p>Like str.endswith, but also checks that the string ends with the given prefixes sequence of graphemes.</p> <p>str.endswith may return true for a suffix that is not visually represented as a suffix if a grapheme cluster is initiated before the suffix starts.</p> <pre><code>&gt;&gt;&gt; GraphemeString(\"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\").endswith(\"\ud83c\udf08\")\nFalse\n&gt;&gt;&gt; \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\".endswith(\"\ud83c\udf08\")\nTrue\n</code></pre> Source code in <code>hebrew/grapheme_string.py</code> <pre><code>def endswith(self, suffix: str) -&gt; bool:\n    \"\"\"\n    Like str.endswith, but also checks that the string ends with the given prefixes sequence of graphemes.\n\n    str.endswith may return true for a suffix that is not visually represented as a suffix if a grapheme cluster\n    is initiated before the suffix starts.\n\n    ``` python\n    &gt;&gt;&gt; GraphemeString(\"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\").endswith(\"\ud83c\udf08\")\n    False\n    &gt;&gt;&gt; \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\".endswith(\"\ud83c\udf08\")\n    True\n    ```\n    \"\"\"\n    return grapheme.endswith(self.string, suffix)\n</code></pre>"},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString.get_length","title":"<code>get_length(until)</code>","text":"<p>Returns the number of graphemes in the string.</p> <p>Note that this functions needs to traverse the full string to calculate the length, unlike <code>len(string)</code> and it's time consumption is linear to the length of the string (up to the <code>until</code> value).</p> <p>Only counts up to the <code>until</code> argument, if given. This is useful when testing the length of a string against some limit and the excess length is not interesting.</p> <pre><code>&gt;&gt;&gt; rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\"\n&gt;&gt;&gt; len(rainbow_flag)\n4\n&gt;&gt;&gt; GraphemeString(rainbow_flag).length\n1\n&gt;&gt;&gt; GraphemeString(\"\".join(str(i) for i in range(100))).get_length(30)\n30\n</code></pre> Source code in <code>hebrew/grapheme_string.py</code> <pre><code>def get_length(self, until: int) -&gt; int:\n    \"\"\"\n    Returns the number of graphemes in the string.\n\n    Note that this functions needs to traverse the full string to calculate the length,\n    unlike `len(string)` and it's time consumption is linear to the length of the string\n    (up to the `until` value).\n\n    Only counts up to the `until` argument, if given. This is useful when testing\n    the length of a string against some limit and the excess length is not interesting.\n\n    ``` python\n    &gt;&gt;&gt; rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\"\n    &gt;&gt;&gt; len(rainbow_flag)\n    4\n    &gt;&gt;&gt; GraphemeString(rainbow_flag).length\n    1\n    &gt;&gt;&gt; GraphemeString(\"\".join(str(i) for i in range(100))).get_length(30)\n    30\n    ```\n    \"\"\"\n    return grapheme.length(self.string, until)\n</code></pre>"},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString.safe_split_index","title":"<code>safe_split_index(max_length)</code>","text":"<p>Returns the highest index up to <code>max_len</code> at which the given string can be sliced, without breaking a grapheme.</p> <p>This is useful for when you want to split or take a substring from a string, and don't really care about the exact grapheme length, but don't want to risk breaking existing graphemes.</p> <p>This function does normally not traverse the full grapheme sequence up to the given length, so it can be used for arbitrarily long strings and high <code>max_len</code>s. However, some grapheme boundaries depend on the previous state, so the worst case performance is O(n). In practice, it's only very long non-broken sequences of country flags (represented as Regional Indicators) that will perform badly.</p> <p>The return value will always be between <code>0</code> and <code>len(string)</code>.</p> <pre><code>&gt;&gt;&gt; string = \"tamil \u0ba8\u0bbf (ni)\"\n&gt;&gt;&gt; i = GraphemeString(string).safe_split_index(7)\n&gt;&gt;&gt; i\n6\n&gt;&gt;&gt; string[:i]\n'tamil '\n&gt;&gt;&gt; string[i:]\n'\u0ba8\u0bbf (ni)'\n</code></pre> Source code in <code>hebrew/grapheme_string.py</code> <pre><code>def safe_split_index(self, max_length: int) -&gt; int:\n    \"\"\"\n    Returns the highest index up to `max_len` at which the given string can be sliced, without breaking a grapheme.\n\n    This is useful for when you want to split or take a substring from a string, and don't really care about\n    the exact grapheme length, but don't want to risk breaking existing graphemes.\n\n    This function does normally not traverse the full grapheme sequence up to the given length, so it can be used\n    for arbitrarily long strings and high `max_len`s. However, some grapheme boundaries depend on the previous state,\n    so the worst case performance is O(n). In practice, it's only very long non-broken sequences of country flags\n    (represented as Regional Indicators) that will perform badly.\n\n    The return value will always be between `0` and `len(string)`.\n\n    ``` python\n    &gt;&gt;&gt; string = \"tamil \u0ba8\u0bbf (ni)\"\n    &gt;&gt;&gt; i = GraphemeString(string).safe_split_index(7)\n    &gt;&gt;&gt; i\n    6\n    &gt;&gt;&gt; string[:i]\n    'tamil '\n    &gt;&gt;&gt; string[i:]\n    '\u0ba8\u0bbf (ni)'\n    ```\n    \"\"\"\n    return grapheme.safe_split_index(self.string, max_length)\n</code></pre>"},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString.slice","title":"<code>slice(start=None, end=None)</code>","text":"<p>Returns a substring of the given string, counting graphemes instead of codepoints.</p> <p>Negative indices is currently not supported.</p> <pre><code>&gt;&gt;&gt; string = \"tamil \u0ba8\u0bbf (ni)\"\n\n&gt;&gt;&gt; string[:7]\n'tamil \u0ba8'\n&gt;&gt;&gt; GraphemeString(string).slice(end=7)\n'tamil \u0ba8\u0bbf'\n&gt;&gt;&gt; string[7:]\n'\u0bbf (ni)'\n&gt;&gt;&gt; GraphemeString(string).slice(start=7)\n' (ni)'\n</code></pre> Source code in <code>hebrew/grapheme_string.py</code> <pre><code>def slice(self, start: int = None, end: int = None) -&gt; str:\n    \"\"\"\n    Returns a substring of the given string, counting graphemes instead of codepoints.\n\n    Negative indices is currently not supported.\n\n    ``` python\n    &gt;&gt;&gt; string = \"tamil \u0ba8\u0bbf (ni)\"\n\n    &gt;&gt;&gt; string[:7]\n    'tamil \u0ba8'\n    &gt;&gt;&gt; GraphemeString(string).slice(end=7)\n    'tamil \u0ba8\u0bbf'\n    &gt;&gt;&gt; string[7:]\n    '\u0bbf (ni)'\n    &gt;&gt;&gt; GraphemeString(string).slice(start=7)\n    ' (ni)'\n    ```\n    \"\"\"\n    return grapheme.slice(self.string, start, end)\n</code></pre>"},{"location":"code_reference/grapheme_string/#hebrew.grapheme_string.GraphemeString.startswith","title":"<code>startswith(prefix)</code>","text":"<p>Like str.startswith, but also checks that the string starts with the given prefixes sequence of graphemes.</p> <p>str.startswith may return true for a prefix that is not visually represented as a prefix if a grapheme cluster is continued after the prefix ends.</p> <pre><code>&gt;&gt;&gt; GraphemeString(\"\u270a\ud83c\udffe\").startswith(\"\u270a\")\nFalse\n&gt;&gt;&gt; \"\u270a\ud83c\udffe\".startswith(\"\u270a\")\nTrue\n</code></pre> Source code in <code>hebrew/grapheme_string.py</code> <pre><code>def startswith(self, prefix: str) -&gt; bool:\n    \"\"\"\n    Like str.startswith, but also checks that the string starts with the given prefixes sequence of graphemes.\n\n    str.startswith may return true for a prefix that is not visually represented as a prefix if a grapheme cluster\n    is continued after the prefix ends.\n\n    ``` python\n    &gt;&gt;&gt; GraphemeString(\"\u270a\ud83c\udffe\").startswith(\"\u270a\")\n    False\n    &gt;&gt;&gt; \"\u270a\ud83c\udffe\".startswith(\"\u270a\")\n    True\n    ```\n    \"\"\"\n    return grapheme.startswith(self.string, prefix)\n</code></pre>"},{"location":"code_reference/hebrew/","title":"Hebrew","text":""},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew","title":"<code>Hebrew</code>","text":"<p>               Bases: <code>GraphemeString</code></p> <p>A class representing a Hebrew String.</p> <p>A <code>Hebrew</code> string can contain pure Hebrew letters, or can be composed of any additional characters.</p> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>class Hebrew(GraphemeString):\n    \"\"\"\n    A class representing a Hebrew String.\n\n    A `Hebrew` string can contain pure Hebrew letters, or can be composed of any additional characters.\n    \"\"\"\n\n    def __init__(self, string: str):\n        super().__init__(string)\n\n    def __str__(self) -&gt; str:\n        return self.string\n\n    def __repr__(self) -&gt; str:\n        return self.__str__()\n\n    def no_maqaf(self) -&gt; HebrewT:\n        \"\"\"\n        Replaces all maqafs with spaces.\n\n        This is useful for splitting a string into words when you want words connected by maqafs to be considered as one word.\n        Example: You may think of \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" as one word in some cases but want to split it into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" in other cases.\n\n        :return:\n        \"\"\"\n        return Hebrew(self.string.replace(MAQAF.char, \" \"))\n\n    def no_sof_passuk(self) -&gt; HebrewT:\n        \"\"\"\n        Removes all sof_passuk chars.\n\n        :return:\n        \"\"\"\n        return Hebrew(self.string.replace(SOF_PASSUK.char, \"\"))\n\n    def words(self, split_maqaf: bool = False) -&gt; List[HebrewT]:\n        \"\"\"\n        Splits the string into a list of words.\n\n        :param split_maqaf: Whether to split a single word such as \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" when a maqaf is encountered.\n        :return:\n        \"\"\"\n        string = self.string if not split_maqaf else self.no_maqaf().string\n        return [Hebrew(s) for s in string.split()]\n\n    def text_only(self, remove_maqaf: bool = False) -&gt; HebrewT:\n        \"\"\"\n        Returns a string with all non-letter characters removed.\n        This will remove both niqqud and punctuation.\n\n        :param remove_maqaf: Whether to remove the maqaf characters if they are encountered\n        :return:\n        \"\"\"\n        string = self.no_maqaf().string if remove_maqaf else self.string\n        chars_to_remove = [c.char for c in _NON_LETTER_CHARS if c not in (MAQAF, PASEQ)]\n        string = string.replace(\n            f\" {PASEQ.char} \", \" \"\n        )  # Handled separately to avoid double spaces.\n        for char in chars_to_remove:\n            string = string.replace(char, \"\")\n        return Hebrew(string)\n\n    def no_niqqud(self) -&gt; HebrewT:\n        \"\"\"\n        Removes all niqqud characters.\n        This may be useful to practice reading from the torah.\n\n        :return:\n        \"\"\"\n        string = self.string\n        for char in [c.char for c in NIQQUD_CHARS]:\n            string = string.replace(char, \"\")\n        return Hebrew(string)\n\n    def normalize(self, normalize_yiddish: bool = False) -&gt; HebrewT:\n        \"\"\"\n        Replaces all non-standard hebrew characters with their equivalent values\n        using normal hebrew letters and symbols. This is important when using hebrew fonts. Some fonts may not\n        support these special characters, normalization helps by changing all the characters to be ones that would be\n        supported.\n\n        :param normalize_yiddish: By default, yiddish characters are left alone since they are typically desired.\n        :return:\n        \"\"\"\n        normalized = unicodedata.normalize(\"NFC\", self.string)\n        # normalized = self.string\n        special_chars: dict = (\n            SPECIAL_CHARACTER_NORMALIZED_MAPPING\n            if normalize_yiddish\n            else {\n                k: v\n                for k, v in SPECIAL_CHARACTER_NORMALIZED_MAPPING.items()\n                if not isinstance(k, YiddishChar)\n            }\n        )\n        special_chars = {\n            k.char: \"\".join([val.char for val in v]) if isinstance(v, list) else v.char\n            for k, v in special_chars.items()\n        }\n        if any(char in normalized for char in special_chars):\n            for k, v in special_chars.items():\n                normalized = normalized.replace(k, v)\n        self.string = normalized\n        return self\n\n    def no_taamim(\n        self, remove_maqaf: bool = False, remove_sof_passuk: bool = False\n    ) -&gt; HebrewT:\n        \"\"\"\n        Removes all [Ta'amim](https://en.wikipedia.org/wiki/Hebrew_cantillation) characters.\n        Result is a string with just letters and Niqqud characters.\n\n        :param remove_maqaf: Whether to remove the maqaf characters if they are encountered.\n        :param remove_sof_passuk: Whether to remove the remove_sof_passuk character if they are encountered.\n        :return:\n        \"\"\"\n        string = self.no_maqaf().string if remove_maqaf else self.string\n        string = Hebrew(string).no_sof_passuk().string if remove_sof_passuk else string\n        chars_to_remove = [\n            p.char for p in TAAMIM_CHARS if p not in (MAQAF, PASEQ, SOF_PASSUK)\n        ]\n        string = string.replace(\n            f\" {PASEQ.char} \", \" \"\n        )  # Handled separately to avoid double spaces.\n        for char in chars_to_remove:\n            string = string.replace(char, \"\")\n        return Hebrew(string)\n\n    def gematria(\n        self,\n        method: GematriaTypes = GematriaTypes.MISPAR_HECHRACHI,\n        alt_letter_name_spelling: Dict[str, str] = None,\n    ) -&gt; int:\n        \"\"\"\n        Returns the gematria of the string.\n\n        If the contains no hebrew characters, the value returned is 0. Mixing hebrew and english characters is ok!\n\n        :param method: The method to use for calculating the gematria.\n        :param alt_letter_name_spelling: Used only with MISPAR_SHEMI_MILUI: A dict of alternate spellings for a letter\n        that should be used to make the calculation. Eg: `{\"\u05d5\": \"\u05d5\u05d0\u05d5\"}`.\n        :return:\n        \"\"\"\n        # Remove non hebrew characters\n        cleaned_string: str = \"\".join(\n            [c for c in self.string if c in [x.char for x in HEBREW_CHARS] or c == \" \"]\n        )\n\n        if method == GematriaTypes.MISPAR_MUSAFI:\n            # Mispar Musafi (Heb: \u05de\u05e1\u05e4\u05e8 \u05de\u05d5\u05e1\u05e4\u05d9) adds the number of letters in the word or phrase to the value.\n            value = self.__calculate_simple_gematria(cleaned_string)\n            hebrew_letters = [c for c in cleaned_string if c != \" \"]\n            return value + len(hebrew_letters)\n\n        elif method == GematriaTypes.MISPAR_KOLEL:\n            # Mispar Kolel (Heb: \u05de\u05e1\u05e4\u05e8 \u05db\u05dc\u05dc) is the value plus the number of words in the phrase.\n            value = self.__calculate_simple_gematria(cleaned_string)\n            hebrew_words = cleaned_string.split()\n            return value + len(hebrew_words)\n\n        elif method == GematriaTypes.MISPAR_BONEEH:\n            # Mispar Bone'eh (building value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05d1\u05d5\u05e0\u05d4) adds the value of all previous letters in the word to the\n            # value of the current letter as the word is calculated. (ex. Echad is 1 + (1 + 8) + (1 + 8 + 4) = 23).\n            values = [\n                self.__calculate_simple_gematria(c)\n                for c in [x for x in cleaned_string if x != \" \"]\n            ]\n            total = 0\n            for i, n in enumerate(values):\n                total += sum(values[:i]) + n\n            return total\n\n        elif method == GematriaTypes.MISPAR_HAMERUBAH_HAKLALI:\n            # Mispar HaMerubah HaKlali (Heb: \u05de\u05e1\u05e4\u05e8 \u05d4\u05de\u05e8\u05d5\u05d1\u05e2 \u05d4\u05db\u05dc\u05dc\u05d9) is the standard value squared.\n            return self.__calculate_simple_gematria(cleaned_string) ** 2\n\n        elif method == GematriaTypes.MISPAR_HAACHOR:\n            # Mispar Ha'achor (sometimes called Mispar Meshulash, triangular value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05d4\u05d0\u05d7\u05d5\u05e8) values each letter\n            # as its value multiplied by the position of the letter in the word or phrase.\n            values = [\n                self.__calculate_simple_gematria(c)\n                for c in [x for x in cleaned_string if x != \" \"]\n            ]\n            total = 0\n            for i, n in enumerate(values):\n                total += n * (i + 1)\n            return total\n\n        elif method == GematriaTypes.MISPAR_KATAN_MISPARI:\n            # Mispar Katan Mispari (integral reduced value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05e7\u05d8\u05df \u05de\u05e1\u05e4\u05e8\u05d9) is the digital root of the standard\n            # value which is obtained by adding all the digits in the number until the number is a single digit.\n            # (ex. Echad (13) --&gt; 1 + 3 --&gt; 4).\n            calculated_value = self.__calculate_simple_gematria(cleaned_string)\n            while calculated_value &gt; 9:\n                calculated_value = sum([int(x) for x in str(calculated_value)])\n            return calculated_value\n\n        elif method == GematriaTypes.MISPAR_SHEMI_MILUI:\n            # Mispar Shemi (Milui, full name value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05e9\u05de\u05d9\\\u05de\u05d9\u05dc\u05d5\u05d9) values each letter as the value of the\n            # letter's name. (ex. \"Aleph\" = Aleph + Lamed + Fey = 1 + 30 + 80 = 111).\n            # [Note: There is more than one way to spell certain letters.]\n\n            # Get list of HebrewChar instances for each letter in string\n            chars: List[HebrewChar] = [\n                CHARS[c] for c in [x for x in cleaned_string if x != \" \"]\n            ]\n\n            # Convert final letters to non-final since our internal lib naming for final letters\n            # will ruin the calculation.\n            replaced_final_letters = [\n                CHARS[FINAL_MINOR_LETTER_MAPPINGS.get(c.char)] if c.final_letter else c\n                for c in chars\n            ]\n\n            # Get internal or user supplied names, and calculate value off them.\n            values = [\n                self.__calculate_simple_gematria(\n                    get_hebrew_name(c, alt_letter_name_spelling)\n                )\n                for c in replaced_final_letters\n            ]\n            return sum(values)\n\n        elif method == GematriaTypes.MISPAR_NEELAM:\n            # Mispar Ne'elam (hidden value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05e0\u05e2\u05dc\u05dd) values each letter as the value of the letter's name\n            # without the letter itself. (ex. \"Aleph\" = Lamed + Fey = 30 + 80 = 110).\n\n            # Get list of HebrewChar instances for each letter in string\n            chars: List[HebrewChar] = [\n                CHARS[c] for c in [x for x in cleaned_string if x != \" \"]\n            ]\n\n            # Convert final letters to non-final since our internal lib naming for final letters\n            # will ruin the calculation.\n            replaced_final_letters = [\n                CHARS[FINAL_MINOR_LETTER_MAPPINGS.get(c.char)] if c.final_letter else c\n                for c in chars\n            ]\n\n            # Get internal or user supplied names.\n            names = [\n                get_hebrew_name(c, alt_letter_name_spelling)\n                for c in replaced_final_letters\n            ]\n\n            # Remove letter from name and calculate value\n            values = [self.__calculate_simple_gematria(c[1:]) for c in names]\n            return sum(values)\n\n        else:\n            # Simple gematria that can be calculated by simply adding each letters value up to a final number.\n            return self.__calculate_simple_gematria(self.string, method)\n\n    @classmethod\n    def from_number(\n        cls,\n        number: int,\n        punctuate: bool = True,\n        geresh: bool = True,\n        substitution_functions: Optional[\n            Tuple[Callable[[str], str], ...]\n        ] = Substitutions.DEFAULT,\n    ):\n        \"\"\"\n        Convert a number into its Hebrew letter form, returning it as an instance of Hebrew.\n\n        :param number: The number to convert to Hebrew letters. Must be greater than 0...\n        :param punctuate: Whether to add punctuation in the appropriate places.\n        :param geresh: If punctuate is true, whether to use the unicode geresh or an apostrophe.\n        :param substitution_functions: A tuple of functions that replaces some hebrew values in the result with an\n        appropriate equivalent. By default, \"\u05d9\u05d4\" and \"\u05d9\u05d5\" are replaced with \"\u05d8\u05d5\" and \"\u05d8\u05d6\" respectively. To replace all\n        values such as \u05e9\u05de\u05d3 ,\u05e8\u05e2, and others, use `Substitutions.ALL`.\n        :return:\n        \"\"\"\n        return cls(\n            number_to_hebrew_string(number, punctuate, geresh, substitution_functions)\n        )\n\n    @staticmethod\n    def __calculate_simple_gematria(\n        string: str, method: GematriaTypes = GematriaTypes.MISPAR_HECHRACHI\n    ) -&gt; int:\n        \"\"\"Calculate Gematria for simple Gematria that use a value map for each letter.\"\"\"\n        chars = [\n            CHARS[c] for c in string if CHARS.get(c) and hasattr(CHARS[c], method.value)\n        ]\n        if len(chars) == 0:\n            # The list will be 0 if there are no letters in the string or if the letters are not hebrew.\n            return 0\n        else:\n            return reduce(add, [getattr(c, method.value) for c in chars])\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew.from_number","title":"<code>from_number(number, punctuate=True, geresh=True, substitution_functions=Substitutions.DEFAULT)</code>  <code>classmethod</code>","text":"<p>Convert a number into its Hebrew letter form, returning it as an instance of Hebrew.</p> <p>Parameters:</p> <ul> <li> <code>number</code>               (<code>int</code>)           \u2013            <p>The number to convert to Hebrew letters. Must be greater than 0...</p> </li> <li> <code>punctuate</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to add punctuation in the appropriate places.</p> </li> <li> <code>geresh</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If punctuate is true, whether to use the unicode geresh or an apostrophe.</p> </li> <li> <code>substitution_functions</code>               (<code>Optional[Tuple[Callable[[str], str], ...]]</code>, default:                   <code>DEFAULT</code> )           \u2013            <p>A tuple of functions that replaces some hebrew values in the result with an appropriate equivalent. By default, \"\u05d9\u05d4\" and \"\u05d9\u05d5\" are replaced with \"\u05d8\u05d5\" and \"\u05d8\u05d6\" respectively. To replace all values such as \u05e9\u05de\u05d3 ,\u05e8\u05e2, and others, use <code>Substitutions.ALL</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li>           \u2013            </li> </ul> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>@classmethod\ndef from_number(\n    cls,\n    number: int,\n    punctuate: bool = True,\n    geresh: bool = True,\n    substitution_functions: Optional[\n        Tuple[Callable[[str], str], ...]\n    ] = Substitutions.DEFAULT,\n):\n    \"\"\"\n    Convert a number into its Hebrew letter form, returning it as an instance of Hebrew.\n\n    :param number: The number to convert to Hebrew letters. Must be greater than 0...\n    :param punctuate: Whether to add punctuation in the appropriate places.\n    :param geresh: If punctuate is true, whether to use the unicode geresh or an apostrophe.\n    :param substitution_functions: A tuple of functions that replaces some hebrew values in the result with an\n    appropriate equivalent. By default, \"\u05d9\u05d4\" and \"\u05d9\u05d5\" are replaced with \"\u05d8\u05d5\" and \"\u05d8\u05d6\" respectively. To replace all\n    values such as \u05e9\u05de\u05d3 ,\u05e8\u05e2, and others, use `Substitutions.ALL`.\n    :return:\n    \"\"\"\n    return cls(\n        number_to_hebrew_string(number, punctuate, geresh, substitution_functions)\n    )\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew.gematria","title":"<code>gematria(method=GematriaTypes.MISPAR_HECHRACHI, alt_letter_name_spelling=None)</code>","text":"<p>Returns the gematria of the string.</p> <p>If the contains no hebrew characters, the value returned is 0. Mixing hebrew and english characters is ok!</p> <p>Parameters:</p> <ul> <li> <code>method</code>               (<code>GematriaTypes</code>, default:                   <code>MISPAR_HECHRACHI</code> )           \u2013            <p>The method to use for calculating the gematria.</p> </li> <li> <code>alt_letter_name_spelling</code>               (<code>Dict[str, str]</code>, default:                   <code>None</code> )           \u2013            <p>Used only with MISPAR_SHEMI_MILUI: A dict of alternate spellings for a letter that should be used to make the calculation. Eg: <code>{\"\u05d5\": \"\u05d5\u05d0\u05d5\"}</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            </li> </ul> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>def gematria(\n    self,\n    method: GematriaTypes = GematriaTypes.MISPAR_HECHRACHI,\n    alt_letter_name_spelling: Dict[str, str] = None,\n) -&gt; int:\n    \"\"\"\n    Returns the gematria of the string.\n\n    If the contains no hebrew characters, the value returned is 0. Mixing hebrew and english characters is ok!\n\n    :param method: The method to use for calculating the gematria.\n    :param alt_letter_name_spelling: Used only with MISPAR_SHEMI_MILUI: A dict of alternate spellings for a letter\n    that should be used to make the calculation. Eg: `{\"\u05d5\": \"\u05d5\u05d0\u05d5\"}`.\n    :return:\n    \"\"\"\n    # Remove non hebrew characters\n    cleaned_string: str = \"\".join(\n        [c for c in self.string if c in [x.char for x in HEBREW_CHARS] or c == \" \"]\n    )\n\n    if method == GematriaTypes.MISPAR_MUSAFI:\n        # Mispar Musafi (Heb: \u05de\u05e1\u05e4\u05e8 \u05de\u05d5\u05e1\u05e4\u05d9) adds the number of letters in the word or phrase to the value.\n        value = self.__calculate_simple_gematria(cleaned_string)\n        hebrew_letters = [c for c in cleaned_string if c != \" \"]\n        return value + len(hebrew_letters)\n\n    elif method == GematriaTypes.MISPAR_KOLEL:\n        # Mispar Kolel (Heb: \u05de\u05e1\u05e4\u05e8 \u05db\u05dc\u05dc) is the value plus the number of words in the phrase.\n        value = self.__calculate_simple_gematria(cleaned_string)\n        hebrew_words = cleaned_string.split()\n        return value + len(hebrew_words)\n\n    elif method == GematriaTypes.MISPAR_BONEEH:\n        # Mispar Bone'eh (building value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05d1\u05d5\u05e0\u05d4) adds the value of all previous letters in the word to the\n        # value of the current letter as the word is calculated. (ex. Echad is 1 + (1 + 8) + (1 + 8 + 4) = 23).\n        values = [\n            self.__calculate_simple_gematria(c)\n            for c in [x for x in cleaned_string if x != \" \"]\n        ]\n        total = 0\n        for i, n in enumerate(values):\n            total += sum(values[:i]) + n\n        return total\n\n    elif method == GematriaTypes.MISPAR_HAMERUBAH_HAKLALI:\n        # Mispar HaMerubah HaKlali (Heb: \u05de\u05e1\u05e4\u05e8 \u05d4\u05de\u05e8\u05d5\u05d1\u05e2 \u05d4\u05db\u05dc\u05dc\u05d9) is the standard value squared.\n        return self.__calculate_simple_gematria(cleaned_string) ** 2\n\n    elif method == GematriaTypes.MISPAR_HAACHOR:\n        # Mispar Ha'achor (sometimes called Mispar Meshulash, triangular value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05d4\u05d0\u05d7\u05d5\u05e8) values each letter\n        # as its value multiplied by the position of the letter in the word or phrase.\n        values = [\n            self.__calculate_simple_gematria(c)\n            for c in [x for x in cleaned_string if x != \" \"]\n        ]\n        total = 0\n        for i, n in enumerate(values):\n            total += n * (i + 1)\n        return total\n\n    elif method == GematriaTypes.MISPAR_KATAN_MISPARI:\n        # Mispar Katan Mispari (integral reduced value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05e7\u05d8\u05df \u05de\u05e1\u05e4\u05e8\u05d9) is the digital root of the standard\n        # value which is obtained by adding all the digits in the number until the number is a single digit.\n        # (ex. Echad (13) --&gt; 1 + 3 --&gt; 4).\n        calculated_value = self.__calculate_simple_gematria(cleaned_string)\n        while calculated_value &gt; 9:\n            calculated_value = sum([int(x) for x in str(calculated_value)])\n        return calculated_value\n\n    elif method == GematriaTypes.MISPAR_SHEMI_MILUI:\n        # Mispar Shemi (Milui, full name value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05e9\u05de\u05d9\\\u05de\u05d9\u05dc\u05d5\u05d9) values each letter as the value of the\n        # letter's name. (ex. \"Aleph\" = Aleph + Lamed + Fey = 1 + 30 + 80 = 111).\n        # [Note: There is more than one way to spell certain letters.]\n\n        # Get list of HebrewChar instances for each letter in string\n        chars: List[HebrewChar] = [\n            CHARS[c] for c in [x for x in cleaned_string if x != \" \"]\n        ]\n\n        # Convert final letters to non-final since our internal lib naming for final letters\n        # will ruin the calculation.\n        replaced_final_letters = [\n            CHARS[FINAL_MINOR_LETTER_MAPPINGS.get(c.char)] if c.final_letter else c\n            for c in chars\n        ]\n\n        # Get internal or user supplied names, and calculate value off them.\n        values = [\n            self.__calculate_simple_gematria(\n                get_hebrew_name(c, alt_letter_name_spelling)\n            )\n            for c in replaced_final_letters\n        ]\n        return sum(values)\n\n    elif method == GematriaTypes.MISPAR_NEELAM:\n        # Mispar Ne'elam (hidden value) (Heb: \u05de\u05e1\u05e4\u05e8 \u05e0\u05e2\u05dc\u05dd) values each letter as the value of the letter's name\n        # without the letter itself. (ex. \"Aleph\" = Lamed + Fey = 30 + 80 = 110).\n\n        # Get list of HebrewChar instances for each letter in string\n        chars: List[HebrewChar] = [\n            CHARS[c] for c in [x for x in cleaned_string if x != \" \"]\n        ]\n\n        # Convert final letters to non-final since our internal lib naming for final letters\n        # will ruin the calculation.\n        replaced_final_letters = [\n            CHARS[FINAL_MINOR_LETTER_MAPPINGS.get(c.char)] if c.final_letter else c\n            for c in chars\n        ]\n\n        # Get internal or user supplied names.\n        names = [\n            get_hebrew_name(c, alt_letter_name_spelling)\n            for c in replaced_final_letters\n        ]\n\n        # Remove letter from name and calculate value\n        values = [self.__calculate_simple_gematria(c[1:]) for c in names]\n        return sum(values)\n\n    else:\n        # Simple gematria that can be calculated by simply adding each letters value up to a final number.\n        return self.__calculate_simple_gematria(self.string, method)\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew.no_maqaf","title":"<code>no_maqaf()</code>","text":"<p>Replaces all maqafs with spaces.</p> <p>This is useful for splitting a string into words when you want words connected by maqafs to be considered as one word. Example: You may think of \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" as one word in some cases but want to split it into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" in other cases.</p> <p>Returns:</p> <ul> <li> <code>HebrewT</code>           \u2013            </li> </ul> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>def no_maqaf(self) -&gt; HebrewT:\n    \"\"\"\n    Replaces all maqafs with spaces.\n\n    This is useful for splitting a string into words when you want words connected by maqafs to be considered as one word.\n    Example: You may think of \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" as one word in some cases but want to split it into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" in other cases.\n\n    :return:\n    \"\"\"\n    return Hebrew(self.string.replace(MAQAF.char, \" \"))\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew.no_niqqud","title":"<code>no_niqqud()</code>","text":"<p>Removes all niqqud characters. This may be useful to practice reading from the torah.</p> <p>Returns:</p> <ul> <li> <code>HebrewT</code>           \u2013            </li> </ul> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>def no_niqqud(self) -&gt; HebrewT:\n    \"\"\"\n    Removes all niqqud characters.\n    This may be useful to practice reading from the torah.\n\n    :return:\n    \"\"\"\n    string = self.string\n    for char in [c.char for c in NIQQUD_CHARS]:\n        string = string.replace(char, \"\")\n    return Hebrew(string)\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew.no_sof_passuk","title":"<code>no_sof_passuk()</code>","text":"<p>Removes all sof_passuk chars.</p> <p>Returns:</p> <ul> <li> <code>HebrewT</code>           \u2013            </li> </ul> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>def no_sof_passuk(self) -&gt; HebrewT:\n    \"\"\"\n    Removes all sof_passuk chars.\n\n    :return:\n    \"\"\"\n    return Hebrew(self.string.replace(SOF_PASSUK.char, \"\"))\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew.no_taamim","title":"<code>no_taamim(remove_maqaf=False, remove_sof_passuk=False)</code>","text":"<p>Removes all Ta'amim characters. Result is a string with just letters and Niqqud characters.</p> <p>Parameters:</p> <ul> <li> <code>remove_maqaf</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove the maqaf characters if they are encountered.</p> </li> <li> <code>remove_sof_passuk</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove the remove_sof_passuk character if they are encountered.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>HebrewT</code>           \u2013            </li> </ul> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>def no_taamim(\n    self, remove_maqaf: bool = False, remove_sof_passuk: bool = False\n) -&gt; HebrewT:\n    \"\"\"\n    Removes all [Ta'amim](https://en.wikipedia.org/wiki/Hebrew_cantillation) characters.\n    Result is a string with just letters and Niqqud characters.\n\n    :param remove_maqaf: Whether to remove the maqaf characters if they are encountered.\n    :param remove_sof_passuk: Whether to remove the remove_sof_passuk character if they are encountered.\n    :return:\n    \"\"\"\n    string = self.no_maqaf().string if remove_maqaf else self.string\n    string = Hebrew(string).no_sof_passuk().string if remove_sof_passuk else string\n    chars_to_remove = [\n        p.char for p in TAAMIM_CHARS if p not in (MAQAF, PASEQ, SOF_PASSUK)\n    ]\n    string = string.replace(\n        f\" {PASEQ.char} \", \" \"\n    )  # Handled separately to avoid double spaces.\n    for char in chars_to_remove:\n        string = string.replace(char, \"\")\n    return Hebrew(string)\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew.normalize","title":"<code>normalize(normalize_yiddish=False)</code>","text":"<p>Replaces all non-standard hebrew characters with their equivalent values using normal hebrew letters and symbols. This is important when using hebrew fonts. Some fonts may not support these special characters, normalization helps by changing all the characters to be ones that would be supported.</p> <p>Parameters:</p> <ul> <li> <code>normalize_yiddish</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>By default, yiddish characters are left alone since they are typically desired.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>HebrewT</code>           \u2013            </li> </ul> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>def normalize(self, normalize_yiddish: bool = False) -&gt; HebrewT:\n    \"\"\"\n    Replaces all non-standard hebrew characters with their equivalent values\n    using normal hebrew letters and symbols. This is important when using hebrew fonts. Some fonts may not\n    support these special characters, normalization helps by changing all the characters to be ones that would be\n    supported.\n\n    :param normalize_yiddish: By default, yiddish characters are left alone since they are typically desired.\n    :return:\n    \"\"\"\n    normalized = unicodedata.normalize(\"NFC\", self.string)\n    # normalized = self.string\n    special_chars: dict = (\n        SPECIAL_CHARACTER_NORMALIZED_MAPPING\n        if normalize_yiddish\n        else {\n            k: v\n            for k, v in SPECIAL_CHARACTER_NORMALIZED_MAPPING.items()\n            if not isinstance(k, YiddishChar)\n        }\n    )\n    special_chars = {\n        k.char: \"\".join([val.char for val in v]) if isinstance(v, list) else v.char\n        for k, v in special_chars.items()\n    }\n    if any(char in normalized for char in special_chars):\n        for k, v in special_chars.items():\n            normalized = normalized.replace(k, v)\n    self.string = normalized\n    return self\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew.text_only","title":"<code>text_only(remove_maqaf=False)</code>","text":"<p>Returns a string with all non-letter characters removed. This will remove both niqqud and punctuation.</p> <p>Parameters:</p> <ul> <li> <code>remove_maqaf</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to remove the maqaf characters if they are encountered</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>HebrewT</code>           \u2013            </li> </ul> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>def text_only(self, remove_maqaf: bool = False) -&gt; HebrewT:\n    \"\"\"\n    Returns a string with all non-letter characters removed.\n    This will remove both niqqud and punctuation.\n\n    :param remove_maqaf: Whether to remove the maqaf characters if they are encountered\n    :return:\n    \"\"\"\n    string = self.no_maqaf().string if remove_maqaf else self.string\n    chars_to_remove = [c.char for c in _NON_LETTER_CHARS if c not in (MAQAF, PASEQ)]\n    string = string.replace(\n        f\" {PASEQ.char} \", \" \"\n    )  # Handled separately to avoid double spaces.\n    for char in chars_to_remove:\n        string = string.replace(char, \"\")\n    return Hebrew(string)\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.Hebrew.words","title":"<code>words(split_maqaf=False)</code>","text":"<p>Splits the string into a list of words.</p> <p>Parameters:</p> <ul> <li> <code>split_maqaf</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to split a single word such as \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" when a maqaf is encountered.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[HebrewT]</code>           \u2013            </li> </ul> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>def words(self, split_maqaf: bool = False) -&gt; List[HebrewT]:\n    \"\"\"\n    Splits the string into a list of words.\n\n    :param split_maqaf: Whether to split a single word such as \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" when a maqaf is encountered.\n    :return:\n    \"\"\"\n    string = self.string if not split_maqaf else self.no_maqaf().string\n    return [Hebrew(s) for s in string.split()]\n</code></pre>"},{"location":"code_reference/hebrew/#hebrew.hebrew_obj.get_hebrew_name","title":"<code>get_hebrew_name(letter, name_dict)</code>","text":"<p>Helper function to get the letters name from the library definition or from the alts provided by the user.</p> <p>The name value passed must be a name that is defined in the characters <code>HebrewChar</code> instance or a ValueError will be thrown. This is done to make sure that only valid naming is used.</p> Source code in <code>hebrew/hebrew_obj.py</code> <pre><code>def get_hebrew_name(letter: HebrewChar, name_dict) -&gt; str:\n    \"\"\"\n    Helper function to get the letters name from the library definition\n    or from the alts provided by the user.\n\n    The name value passed *must* be a name that is defined in the characters `HebrewChar` instance or a\n    ValueError will be thrown. This is done to make sure that only valid naming is used.\n    \"\"\"\n    if not name_dict:\n        name_dict = {}\n\n    if name_dict and letter.char in name_dict.keys():\n        name = name_dict.get(letter.char)\n        clean_name = Hebrew(name).text_only()\n        if clean_name not in [Hebrew(nm).text_only() for nm in letter.hebrew_names]:\n            raise ValueError(f\"{name} is not a valid name for {letter}\")\n        return clean_name.string\n    else:\n        return letter.hebrew_name\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/","title":"Classes and functions","text":"<p>Constants for each Hebrew character and classes to represent them, and metadata about them.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ALEF_MAPIQ","title":"<code>ALEF_MAPIQ = HebrewChar('\ufb30', name='Alef with Mapiq')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb30'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ALEF_PATAH","title":"<code>ALEF_PATAH = HebrewChar('\ufb2e', name='Alef with Patah')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2e'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ALEF_QAMATZ","title":"<code>ALEF_QAMATZ = HebrewChar('\ufb2f', name='Alef with Qamats')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2f'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ALEF_WIDE","title":"<code>ALEF_WIDE = HebrewChar('\ufb21', name='Wide Alef')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb21'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ALEPH","title":"<code>ALEPH = HebrewChar(char='\u05d0', name='Aleph', hebrew_name='\u05d0\u05b8\u05dc\u05b6\u05e3', name_alts=['Alef'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d0'</code></p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ALEPH_LAMED","title":"<code>ALEPH_LAMED = HebrewChar('\ufb4f', name='Alef Lamed')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4f'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ALEPH_SYMBOL","title":"<code>ALEPH_SYMBOL = HebrewChar('\u2135', name='Aleph Symbol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u2135'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ALL_CHARS","title":"<code>ALL_CHARS: List[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]] = [ALEPH, BET, VET, GIMEL, DALET, HE, VAV, ZAYIN, CHET, TET, YOD, CAF, KAF_SOFIT, CHAF, CHAF_SOFIT, LAMED, MEM, MEM_SOFIT, NUN, NUN_SOFIT, SAMEKH, AYIN, PE, FE, PE_SOFIT, FE_SOFIT, TSADI, TSADI_SOFIT, QOF, RESH, SHIN, SIN, PLAIN_SIN, TAV, SAV, DOUBLE_YOD, DOUBLE_VAV, VAV_YOD, SIN_DOT, SHIN_DOT, DAGESH, QUBUTS, SHURUK, HOLAM, QAMATS, PATAH, SEGOL, TSERE, HIRIQ, HATAF_QAMATS, HATAF_PATAH, HATAF_SEGOL, SHEVA, UPPER_DOT, MAQAF, PASEQ, SOF_PASSUK, ETNAHTA, SEGOL_TOP, SHALSHELET, ZAQEF_QATAN, ZAQEF_GADOL, TIFCHA, REVIA, ZINOR, PASHTA, PASHTA_2, YETIV, TEVIR, PAZER, TELISHA_GEDOLA, TELISHA_KETANNAH, GERESH, AZLA_GERESH, GERSHAYIM, GERSHAYIM_2, MERCHA, MUNACH, MAHPACH, DARGA, MERCHA_KEFULA, YERACH_BEN_YOMO, MASORA, DEHI, ZARQA, GERESH_MUQDAM, QARNEY_PARA, OLA, ILUY, RAFE, METEG, ATNAH_HAFUKH, HOLAM_HASER, LOWER_DOT, INVERTED_NUN, ALEPH_SYMBOL, BET_SYMBOL, GIMEL_SYMBOL, DALET_SYMBOL, YOD_HIRIQ, YOD_YOD_PATAH, YOD_YOD_PATAH2, AYIN_ALT, ALEF_WIDE, DALET_WIDE, HE_WIDE, KAF_WIDE, LAMED_WIDE, FINAL_MEM_WIDE, RESH_WIDE, TAV_WIDE, SHIN_SHIN_DOT, SHIN_SIN_DOT, SHIN_DAGESH_SHIN_DOT, SHIN_DAGESH_SIN_DOT, ALEF_PATAH, ALEF_QAMATZ, ALEF_MAPIQ, BET_DAGESH, GIMEL_DAGESH, DALET_DAGESH, HE_MAPIQ, VAV_DAGESH, ZAYIN_DAGESH, TET_DAGESH, YOD_DAGESH, FINAL_KAF_DAGESH, KAF_DAGESH, LAMED_DAGESH, MEM_DAGESH, NUN_DAGESH, SAMEKH_DAGESH, FINAL_PE_DAGESH, PE_DAGESH, TSADI_DAGESH, QOF_DAGESH, RESH_DAGESH, SHIN_DAGESH, TAV_DAGESH, VAV_HOLAM, BET_RAFE, KAF_RAFE, PE_RAFE, ALEPH_LAMED, QAMATS_KATAN, YOD_TRIANGLE, JUDEO_SPANISH_VARIKA, ALTERNATIVE_PLUS_SIGN]</code>  <code>module-attribute</code>","text":"<p>Every instance of a character class. This is used for defining collections with list comprehensions based on the Chars metadata. It can be relied on as being a complete list of Unicode characters used in Hebrew (and Yiddish etc).</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ALTERNATIVE_PLUS_SIGN","title":"<code>ALTERNATIVE_PLUS_SIGN = OtherChar(char='\ufb29', name='Alternative Plus Sign')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>OtherChar</code> representing the character <code>'\ufb29'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ATNAH_HAFUKH","title":"<code>ATNAH_HAFUKH = TaamimChar(char='\u05a2', name='Atnah Hafukh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a2'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.AYIN","title":"<code>AYIN = HebrewChar(char='\u05e2', name='Ayin', hebrew_name='\u05e2\u05b7\u05d9\u05b4\u05df')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e2'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.AYIN_ALT","title":"<code>AYIN_ALT = HebrewChar('\ufb20', name='Alternative Ayin')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb20'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.AZLA_GERESH","title":"<code>AZLA_GERESH = TaamimChar(char='\u059c', name='Azla Geresh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059c'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BES","title":"<code>BES = BET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>BET</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BET","title":"<code>BET = HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', hebrew_name_alts=['\u05d1\u05ea'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d1\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BET_DAGESH","title":"<code>BET_DAGESH = HebrewChar('\ufb31', name='Bet with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb31'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BET_RAFE","title":"<code>BET_RAFE = HebrewChar('\ufb4c', name='Bet with Rafe')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4c'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BET_SYMBOL","title":"<code>BET_SYMBOL = HebrewChar('\u2136', name='Bet Symbol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u2136'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.CAF","title":"<code>CAF = HebrewChar(char='\u05db\u05bc', name='Kaf', hebrew_name='\u05db\u05b7\u05bc\u05e3')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05db\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.CHAF","title":"<code>CHAF = HebrewChar(char='\u05db', name='Chaf', hebrew_name='\u05db\u05b7\u05e3')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05db'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.CHAF_SOFIT","title":"<code>CHAF_SOFIT = HebrewChar(char='\u05da', name='Chaf Sofit', final_letter=True, hebrew_name='\u05db\u05b7\u05e3 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Chaf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05da'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.CHARS","title":"<code>CHARS: Dict[str, Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]] = {c.char: cfor c in ALL_CHARS}</code>  <code>module-attribute</code>","text":"<p>A dict of all instances of all supported Char types where the key is the char and the value is an instance of BaseHebrewChar. This is useful for when you have a hebrew char and want to get its metadata class.</p> <pre><code>assert CHARS['\u05d0'] == ALEPH\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.CHES","title":"<code>CHES = CHET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>CHET</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.CHET","title":"<code>CHET = HebrewChar(char='\u05d7', name='Chet', hebrew_name='\u05d7\u05b5\u05d9\u05ea', hebrew_name_alts=['\u05d7\u05ea'], name_alts=['Het', 'Ches'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d6'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.CHIRIK","title":"<code>CHIRIK = HIRIQ</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>HIRIQ</code></p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DAGESH","title":"<code>DAGESH = NiqqudChar(char='\u05bc', name='Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05bc'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DALED","title":"<code>DALED = DALET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>DALET</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DALET","title":"<code>DALET = HebrewChar(char='\u05d3', name='Dalet', hebrew_name='\u05d3\u05b8\u05dc\u05b6\u05ea', hebrew_name_alts=['\u05d3\u05dc\u05d9\u05ea'], name_alts=['Daled'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d3'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DALET_DAGESH","title":"<code>DALET_DAGESH = HebrewChar('\ufb33', name='Dalet with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb33'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DALET_SYMBOL","title":"<code>DALET_SYMBOL = HebrewChar('\u2138', name='Dalet Symbol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u2138'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DALET_WIDE","title":"<code>DALET_WIDE = HebrewChar('\ufb22', name='Wide Dalet')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb22'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DARGA","title":"<code>DARGA = TaamimChar(char='\u05a7', name='Darga')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a7'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DEHI","title":"<code>DEHI = TaamimChar(char='\u05ad', name='Dehi')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05ad'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DOUBLE_VAV","title":"<code>DOUBLE_VAV = YiddishChar(char='\u05f0', name='Double Vav', name_alts=['Double Vuv'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letter <code>'\u05f0'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DOUBLE_VUV","title":"<code>DOUBLE_VUV = DOUBLE_VAV</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>DOUBLE_VAV</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DOUBLE_YOD","title":"<code>DOUBLE_YOD = YiddishChar(char='\u05f2', name='Double Yod', name_alts=['Saf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letter <code>'\u05f2'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.DOUBLE_YUD","title":"<code>DOUBLE_YUD = DOUBLE_YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>DOUBLE_YOD</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ETNAHTA","title":"<code>ETNAHTA = TaamimChar(char='\u0591', name='Etnahta')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0591'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FE","title":"<code>FE = HebrewChar(char='\u05e4', name='Fe', hebrew_name='\u05e4\u05b5\u05d0', hebrew_name_alts=['\u05e4\u05d9', '\u05e4\u05d4'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e4'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FE_SOFIT","title":"<code>FE_SOFIT = HebrewChar(char='\u05e3', name='Fe Sofit', final_letter=True, hebrew_name='\u05e4\u05b5\u05d0 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Fe'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e3'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_CHAF","title":"<code>FINAL_CHAF = CHAF_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>CHAF_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_FE","title":"<code>FINAL_FE = FE_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>FE_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_KAF","title":"<code>FINAL_KAF = KAF_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>KAF_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_KAF_DAGESH","title":"<code>FINAL_KAF_DAGESH = HebrewChar('\ufb3a', name='Final Kaf with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb3a'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_LETTERS","title":"<code>FINAL_LETTERS: List[HebrewChar] = [c for c in ALL_CHARS if isinstance(c, HebrewChar) and c.final_letter and len(c.char) == 1]</code>  <code>module-attribute</code>","text":"<p>A list of all Hebrew characters that are final letters. While we do have letters like '\u05e3\u05bc' defined, they do not return in this array; it contains only the plain final letters.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_MEM","title":"<code>FINAL_MEM = MEM_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>MEM_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_MEM_WIDE","title":"<code>FINAL_MEM_WIDE = HebrewChar('\ufb26', name='Wide Final Mem')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb26'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_MINOR_LETTER_MAPPINGS","title":"<code>FINAL_MINOR_LETTER_MAPPINGS: Dict[str, str] = {'\u05db': '\u05da', '\u05da': '\u05db', '\u05de': '\u05dd', '\u05dd': '\u05de', '\u05e0': '\u05df', '\u05df': '\u05e0', '\u05e4': '\u05e3', '\u05e3': '\u05e4', '\u05e6': '\u05e5', '\u05e5': '\u05e6'}</code>  <code>module-attribute</code>","text":"<p>A map of final letters to their regular counterparts, and vice versa.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_NUN","title":"<code>FINAL_NUN = NUN_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>NUN_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_PE","title":"<code>FINAL_PE = PE_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>PE_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_PE_DAGESH","title":"<code>FINAL_PE_DAGESH = HebrewChar('\ufb43', name='Final Pe with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb43'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_TSADI","title":"<code>FINAL_TSADI = TSADI_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.FINAL_TZADIK","title":"<code>FINAL_TZADIK = TSADI_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.GERESH","title":"<code>GERESH = OtherChar(char='\u05f3', name='Geresh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>OtherChar</code> representing the character <code>'\u05f3'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.GERESH_MUQDAM","title":"<code>GERESH_MUQDAM = TaamimChar(char='\u059d', name='Geresh Muqdam')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059d'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.GERSHAYIM","title":"<code>GERSHAYIM = OtherChar(char='\u05f4', name='Gershayim')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>OtherChar</code> representing the character <code>'\u05f4'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.GERSHAYIM_2","title":"<code>GERSHAYIM_2 = TaamimChar(char='\u059e', name='Gershayim 2')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059e'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.GIMEL","title":"<code>GIMEL = HebrewChar(char='\u05d2', name='Gimel', hebrew_name='\u05d2\u05b4\u05d9\u05de\u05b5\u05dc', hebrew_name_alts=['\u05d2\u05de\u05dc'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d2'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.GIMEL_DAGESH","title":"<code>GIMEL_DAGESH = HebrewChar('\ufb32', name='Gimel with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb32'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.GIMEL_SYMBOL","title":"<code>GIMEL_SYMBOL = HebrewChar('\u2137', name='Gimel Symbol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u2137'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HATAF_PATAH","title":"<code>HATAF_PATAH = NiqqudChar(char='\u05b2', name='Hataf Patah', name_alts=['Hataf Patach'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b2'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HATAF_QAMATS","title":"<code>HATAF_QAMATS = NiqqudChar(char='\u05b3', name='Hataf Qamatz', name_alts=['Hataf Kumatz'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b3'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HATAF_SEGOL","title":"<code>HATAF_SEGOL = NiqqudChar(char='\u05b1', name='Hataf Segol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b1'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HE","title":"<code>HE = HebrewChar(char='\u05d4', name='He', hebrew_name='\u05d4\u05b5\u05d0', hebrew_name_alts=['\u05d4\u05d9', '\u05d4\u05d4'], name_alts=['Hei', 'Hey'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d4'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HEBREW_CHARS","title":"<code>HEBREW_CHARS: List[HebrewChar] = [c for c in ALL_CHARS if isinstance(c, HebrewChar) and c.char in '\u05d0\u05d1\u05d2\u05d3\u05d4\u05d5\u05d6\u05d7\u05d8\u05d9\u05db\u05da\u05dc\u05de\u05dd\u05e0\u05df\u05e1\u05e2\u05e4\u05e3\u05e6\u05e5\u05e7\u05e8\u05e9\u05ea']</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>HebrewChar</code>. This will include letters like '\u05e3\u05bc'</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HEI","title":"<code>HEI = HE</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>HE</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HET","title":"<code>HET = CHET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>CHET</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HEY","title":"<code>HEY = HE</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>HE</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HE_MAPIQ","title":"<code>HE_MAPIQ = HebrewChar('\ufb34', name='He with Mapiq')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb34'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HE_WIDE","title":"<code>HE_WIDE = HebrewChar('\ufb23', name='Wide He')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb23'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HIRIQ","title":"<code>HIRIQ = NiqqudChar(char='\u05b4', name='Hiriq', name_alts=['Chirik'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b4'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HOLAM","title":"<code>HOLAM = NiqqudChar(char='\u05b9', name='Holam')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b9'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HOLAM_HASER","title":"<code>HOLAM_HASER = NiqqudChar(char='\u05ba', name='Holam Haser')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05ba'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ILUY","title":"<code>ILUY = TaamimChar(char='\u05ac', name='Iluy')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05ac'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.INVERTED_NUN","title":"<code>INVERTED_NUN = OtherChar(char='\u05c6', name='Inverted Nun', hebrew_name='\u05e0\u05d5\"\u05df \u05de\u05e0\u05d5\u05d6\u05e8\u05ea', name_alts=['Nun Hafukha'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>OtherChar</code> representing the letter <code>'\u05c6'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.JUDEO_SPANISH_VARIKA","title":"<code>JUDEO_SPANISH_VARIKA = TaamimChar(char='\ufb1e', name='Judeo-Spanish Varika')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\ufb1e'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.KAF_DAGESH","title":"<code>KAF_DAGESH = HebrewChar('\ufb3b', name='Kaf with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb3b'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.KAF_RAFE","title":"<code>KAF_RAFE = HebrewChar('\ufb4d', name='Kaf with Rafe')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4d'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.KAF_SOFIT","title":"<code>KAF_SOFIT = HebrewChar(char='\u05da\u05bc', name='Kaf Sofit', final_letter=True, hebrew_name='\u05db\u05b7\u05bc\u05e3 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Kaf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05da\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.KAF_WIDE","title":"<code>KAF_WIDE = HebrewChar('\ufb24', name='Wide Kaf')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb24'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.KUBUTZ","title":"<code>KUBUTZ = QUBUTS</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>QUBUTS</code></p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.KUF","title":"<code>KUF = QOF</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.KUMATZ","title":"<code>KUMATZ = QAMATS</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>QAMATS</code></p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.LAMED","title":"<code>LAMED = HebrewChar(char='\u05dc', name='Lamed', hebrew_name='\u05dc\u05b8\u05de\u05b6\u05d3', name_alts=['Lamid'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05dc'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.LAMED_DAGESH","title":"<code>LAMED_DAGESH = HebrewChar('\ufb3c', name='Lamed with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb3c'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.LAMED_WIDE","title":"<code>LAMED_WIDE = HebrewChar('\ufb25', name='Wide Lamed')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb25'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.LAMID","title":"<code>LAMID = LAMED</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>LAMED</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.LOWER_DOT","title":"<code>LOWER_DOT = NiqqudChar(char='\u05c5', name='Lower Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c5'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.MAHPACH","title":"<code>MAHPACH = TaamimChar(char='\u05a4', name='Mahpach')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a4'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.MAQAF","title":"<code>MAQAF = OtherChar(char='\u05be', name='Maqaf')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the character <code>'\u05be'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.MASORA","title":"<code>MASORA = TaamimChar(char='\u05af', name='Masora')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05af'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.MEM","title":"<code>MEM = HebrewChar(char='\u05de', name='Mem', hebrew_name='\u05de\u05b5\u05dd')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05de'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.MEM_DAGESH","title":"<code>MEM_DAGESH = HebrewChar('\ufb3e', name='Mem with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb3e'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.MEM_SOFIT","title":"<code>MEM_SOFIT = HebrewChar(char='\u05dd', name='Mem Sofit', final_letter=True, hebrew_name='\u05de\u05b5\u05dd \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Mem'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05dd'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.MERCHA","title":"<code>MERCHA = TaamimChar(char='\u05a5', name='Mercha')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a5'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.MERCHA_KEFULA","title":"<code>MERCHA_KEFULA = TaamimChar(char='\u05a6', name='Mercha Kefula')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a6'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.METEG","title":"<code>METEG = TaamimChar(char='\u05bd', name='Meteg')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05bd'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.MUNACH","title":"<code>MUNACH = TaamimChar(char='\u05a3', name='Munach')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a3'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.NIQQUD_CHARS","title":"<code>NIQQUD_CHARS: List[NiqqudChar] = [c for c in ALL_CHARS if isinstance(c, NiqqudChar)]</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>NiqqudChar</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.NUN","title":"<code>NUN = HebrewChar(char='\u05e0', name='Nun', hebrew_name='\u05e0\u05d5\u05bc\u05df')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e0'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.NUN_DAGESH","title":"<code>NUN_DAGESH = HebrewChar('\ufb40', name='Nun with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb40'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.NUN_HAFUKHA","title":"<code>NUN_HAFUKHA = INVERTED_NUN</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>INVERTED_NUN</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.NUN_SOFIT","title":"<code>NUN_SOFIT = HebrewChar(char='\u05df', name='Nun Sofit', final_letter=True, hebrew_name='\u05e0\u05d5\u05bc\u05df \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Nun'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05df'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.OLA","title":"<code>OLA = TaamimChar(char='\u05ab', name='Ola')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05ab'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.OTHER_CHARS","title":"<code>OTHER_CHARS: List[OtherChar] = [c for c in ALL_CHARS if isinstance(c, OtherChar)]</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>OtherChar</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PASEQ","title":"<code>PASEQ = OtherChar(char='\u05c0', name='Paseq')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the character <code>'\u05c0'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PASHTA","title":"<code>PASHTA = TaamimChar(char='\u0599', name='Pashta')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0599'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PASHTA_2","title":"<code>PASHTA_2 = TaamimChar(char='\u05a8', name='Pashta 2', name_alts=['Qadma'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a8'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PATACH","title":"<code>PATACH = PATAH</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>PATAH</code></p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PATAH","title":"<code>PATAH = NiqqudChar(char='\u05b7', name='Patah', name_alts=['Patach'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b7'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PAZER","title":"<code>PAZER = TaamimChar(char='\u05a1', name='Pazer')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a1'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PAZER_GADOL","title":"<code>PAZER_GADOL = QARNEY_PARA</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>QARNEY_PARA</code> since they share the same Unicode character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PE","title":"<code>PE = HebrewChar(char='\u05e4\u05bc', name='Pe', hebrew_name_alts=['\u05e4\u05d9', '\u05e4\u05d4'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e4\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PE_DAGESH","title":"<code>PE_DAGESH = HebrewChar('\ufb44', name='Pe with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb44'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PE_RAFE","title":"<code>PE_RAFE = HebrewChar('\ufb4e', name='Pe with Rafe')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4e'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PE_SOFIT","title":"<code>PE_SOFIT = HebrewChar(char='\u05e3\u05bc', name='Fe Sofit', final_letter=True, hebrew_name='\u05e4\u05b5\u05bc\u05d0 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Pe'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e3\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.PLAIN_SIN","title":"<code>PLAIN_SIN = HebrewChar(char='\u05e9', name='Plain Sin', hebrew_name='\u05e9\u05b4\u05c2\u05df', hebrew_name_alts=['\u05e9\u05b4\u05c2\u05d9\u05df'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e9'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.QADMA","title":"<code>QADMA = PASHTA_2</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>PASHTA_2</code> since they share the same Unicode character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.QAMATS","title":"<code>QAMATS = NiqqudChar(char='\u05b8', name='Qamats', name_alts=['Kumatz'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b8'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.QAMATS_KATAN","title":"<code>QAMATS_KATAN = NiqqudChar(char='\u05c7', name='Qamats Qatan', name_alts=['Kumatz Katan'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c7'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.QARNEY_PARA","title":"<code>QARNEY_PARA = TaamimChar(char='\u059f', name='Qarney Para', name_alts=['Pazer Gadol'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059f'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.QOF","title":"<code>QOF = HebrewChar(char='\u05e7', name='Qof', hebrew_name='\u05e7\u05d5\u05b9\u05e3', name_alts=['Kuf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e7'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.QOF_DAGESH","title":"<code>QOF_DAGESH = HebrewChar('\ufb47', name='Qof with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb47'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.QUBUTS","title":"<code>QUBUTS = NiqqudChar(char='\u05bb', name='Qubuts', name_alts=['Kubutz'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05bb'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.RAFE","title":"<code>RAFE = TaamimChar(char='\u05bf', name='Rafe')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05bf'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.RESH","title":"<code>RESH = HebrewChar(char='\u05e8', name='Resh', hebrew_name='\u05e8\u05b5\u05d9\u05e9\u05c1', hebrew_name_alts=['\u05e8\u05e9'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e8'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.RESH_DAGESH","title":"<code>RESH_DAGESH = HebrewChar('\ufb48', name='Resh with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb48'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.RESH_WIDE","title":"<code>RESH_WIDE = HebrewChar('\ufb27', name='Wide Resh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb27'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.REVIA","title":"<code>REVIA = TaamimChar(char='\u0597', name='Revia')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0597'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SAF","title":"<code>SAF = SAV</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>SAV</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SAMACH","title":"<code>SAMACH = SAMEKH</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>SAMEKH</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SAMEKH","title":"<code>SAMEKH = HebrewChar(char='\u05e1', name='Samekh', hebrew_name='\u05e1\u05b8\u05de\u05b6\u05da', name_alts=['Samach'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e1'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SAMEKH_DAGESH","title":"<code>SAMEKH_DAGESH = HebrewChar('\ufb41', name='Samekh with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb41'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SAV","title":"<code>SAV = HebrewChar(char='\u05ea', name='Sav', hebrew_name='\u05ea\u05b8\u05d5', name_alts=['Saf'], hebrew_name_alts=['\u05ea\u05d9\u05d5', '\u05ea\u05d0\u05d5'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05ea'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SEGOL","title":"<code>SEGOL = NiqqudChar(char='\u05b6', name='Segol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b6'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SEGOL_TOP","title":"<code>SEGOL_TOP = TaamimChar(char='\u0592', name='Segol Top')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0592'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHALSHELET","title":"<code>SHALSHELET = TaamimChar(char='\u0593', name='Shalshelet')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0593'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHEVA","title":"<code>SHEVA = NiqqudChar(char='\u05b0', name='Sheva', name_alts=['Shivah'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b0'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHIN","title":"<code>SHIN = HebrewChar(char='\u05e9\u05c1', name='Shin', hebrew_name='\u05e9\u05b4\u05c1\u05df', hebrew_name_alts=['\u05e9\u05b4\u05c1\u05d9\u05df'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e9\u05c1'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHIN_DAGESH","title":"<code>SHIN_DAGESH = HebrewChar('\ufb49', name='Shin with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb49'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHIN_DAGESH_SHIN_DOT","title":"<code>SHIN_DAGESH_SHIN_DOT = HebrewChar('\ufb2c', name='Shin with Dagesh and Shin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2c'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHIN_DAGESH_SIN_DOT","title":"<code>SHIN_DAGESH_SIN_DOT = HebrewChar('\ufb2d', name='Shin with Dagesh and Sin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2d'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHIN_DOT","title":"<code>SHIN_DOT = NiqqudChar(char='\u05c1', name='Shin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c1'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHIN_SHIN_DOT","title":"<code>SHIN_SHIN_DOT = HebrewChar('\ufb2a', name='Shin with Shin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2a'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHIN_SIN_DOT","title":"<code>SHIN_SIN_DOT = HebrewChar('\ufb2b', name='Shin with Sin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2b'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHIVAH","title":"<code>SHIVAH = SHEVA</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>SHEVA</code></p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SHURUK","title":"<code>SHURUK = NiqqudChar(char='\u05d5\u05bc', name='Shuruk')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05d5\u05bc'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SIN","title":"<code>SIN = HebrewChar(char='\u05e9\u05c2', name='Sin', hebrew_name='\u05e9\u05b4\u05c2\u05df', hebrew_name_alts=['\u05e9\u05b4\u05c2\u05d9\u05df'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e9\u05c2'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SIN_DOT","title":"<code>SIN_DOT = NiqqudChar(char='\u05c2', name='Sin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c2'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SOF_PASSUK","title":"<code>SOF_PASSUK = OtherChar(char='\u05c3', name='Sof Passuk')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the character <code>'\u05c3'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.SPECIAL_CHARACTER_NORMALIZED_MAPPING","title":"<code>SPECIAL_CHARACTER_NORMALIZED_MAPPING: Dict[BaseHebrewChar, Union[BaseHebrewChar, List[BaseHebrewChar]]] = {ALEPH_SYMBOL: ALEPH, BET_SYMBOL: VET, GIMEL_SYMBOL: GIMEL, DALET_SYMBOL: DALET, YOD_YOD_PATAH: [YOD, PATAH, YOD], YOD_YOD_PATAH2: [YOD, PATAH, YOD], AYIN_ALT: AYIN, ALEF_WIDE: ALEPH, DALET_WIDE: DALET, HE_WIDE: HE, KAF_WIDE: CHAF, LAMED_WIDE: LAMED, FINAL_MEM_WIDE: FINAL_MEM, RESH_WIDE: RESH, TAV_WIDE: SAV, SHIN_SIN_DOT: SIN, SHIN_DAGESH_SHIN_DOT: [SHIN, DAGESH], SHIN_DAGESH_SIN_DOT: [SIN, DAGESH], ALEPH_LAMED: [ALEPH, LAMED], DOUBLE_YOD: [YOD, YOD], DOUBLE_VAV: [VAV, VAV], VAV_YOD: [YOD, VAV]}</code>  <code>module-attribute</code>","text":"<p>A map of special characters to their normal spelled out equivalent. For example, \ufb4f becomes \u05d0\u05dc</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TAAMIM_CHARS","title":"<code>TAAMIM_CHARS: List[TaamimChar] = [c for c in ALL_CHARS if isinstance(c, TaamimChar)]</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>TaamimChar</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TAF","title":"<code>TAF = TAV</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TAV</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TAV","title":"<code>TAV = HebrewChar(char='\u05ea\u05bc', name='Tav', hebrew_name='\u05ea\u05bc\u05d5', hebrew_name_alts=['\u05ea\u05d9\u05d5', '\u05ea\u05d0\u05d5'], name_alts=['Taf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05ea\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TAV_DAGESH","title":"<code>TAV_DAGESH = HebrewChar('\ufb4a', name='Tav with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4a'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TAV_WIDE","title":"<code>TAV_WIDE = HebrewChar('\ufb28', name='Wide Tav')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb28'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TELISHA_GEDOLA","title":"<code>TELISHA_GEDOLA = TaamimChar(char='\u05a0', name='Telisha Gedola')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a0'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TELISHA_KETANNAH","title":"<code>TELISHA_KETANNAH = TaamimChar(char='\u05a9', name='Telisha Ketannah')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a9'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TES","title":"<code>TES = TET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TET</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TET","title":"<code>TET = HebrewChar(char='\u05d8', name='Tet', hebrew_name='\u05d8\u05b5\u05d9\u05ea', hebrew_name_alts=['\u05d8\u05ea'], name_alts=['Tes'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d8'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TET_DAGESH","title":"<code>TET_DAGESH = HebrewChar('\ufb38', name='Tet with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb38'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TEVIR","title":"<code>TEVIR = TaamimChar(char='\u059b', name='Tevir')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059b'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TIFCHA","title":"<code>TIFCHA = TaamimChar(char='\u0596', name='Tifcha')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0596'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TSADI","title":"<code>TSADI = HebrewChar(char='\u05e6', name='Tsadi', hebrew_name='\u05e6\u05b7\u05d3\u05b4\u05d9', hebrew_name_alts=['\u05e6\u05d3\u05d9\u05e7'], name_alts=['Tzadik'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e6'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TSADI_DAGESH","title":"<code>TSADI_DAGESH = HebrewChar('\ufb46', name='Tsadi with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb46'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TSADI_SOFIT","title":"<code>TSADI_SOFIT = HebrewChar(char='\u05e5', name='Tsadi Sofit', final_letter=True, hebrew_name='\u05e6\u05b7\u05d3\u05b4\u05d9 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', hebrew_name_alts=['\u05e6\u05d3\u05d9\u05e7 \u05e1\u05d5\u05e4\u05d9\u05ea'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e5'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TSERE","title":"<code>TSERE = NiqqudChar(char='\u05b5', name='Tsere')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b5'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TZADIK","title":"<code>TZADIK = TSADI</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TZADIK_SOFIT","title":"<code>TZADIK_SOFIT = TSADI_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI_SOFIT</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.UPPER_DOT","title":"<code>UPPER_DOT = NiqqudChar(char='\u05c4', name='Upper Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c4'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.VAV","title":"<code>VAV = HebrewChar(char='\u05d5', name='Vav', hebrew_name='\u05d5\u05b8\u05d5', hebrew_name_alts=['\u05d5\u05d9\u05d5', '\u05d5\u05d0\u05d5'], name_alts=['Vuv'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d5'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.VAV_DAGESH","title":"<code>VAV_DAGESH = HebrewChar('\ufb35', name='Vav with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb35'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.VAV_HOLAM","title":"<code>VAV_HOLAM = HebrewChar('\ufb4b', name='Vav with Holam')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4b'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.VAV_YOD","title":"<code>VAV_YOD = YiddishChar(char='\u05f1', name='Vav Yod')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letter <code>'\u05f1'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.VAV_YUD","title":"<code>VAV_YUD = VAV_YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>VAV_YOD</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.VET","title":"<code>VET = HebrewChar(char='\u05d1', name='Vet', hebrew_name='\u05d1\u05b5\u05d9\u05ea', hebrew_name_alts=['\u05d1\u05ea'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d1'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.VUV","title":"<code>VUV = VAV</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>VAV</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.VUV_YOD","title":"<code>VUV_YOD = VAV_YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>VAV_YOD</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.VUV_YUD","title":"<code>VUV_YUD = VAV_YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>VAV_YOD</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YERACH_BEN_YOMO","title":"<code>YERACH_BEN_YOMO = TaamimChar(char='\u05aa', name='Yerach Ben Yomo')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05aa'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YETIV","title":"<code>YETIV = TaamimChar(char='\u059a', name='Yetiv')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059a'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YIDDISH_CHARS","title":"<code>YIDDISH_CHARS: List[YiddishChar] = [c for c in ALL_CHARS if isinstance(c, YiddishChar) and c.char in ['\u05f1', '\u05f0', '\u05f2']]</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>YiddishChar</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YOD","title":"<code>YOD = HebrewChar(char='\u05d9', name='Yod', hebrew_name='\u05d9\u05d5\u05b9\u05d3', name_alts=['Yud'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d9'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YOD_DAGESH","title":"<code>YOD_DAGESH = HebrewChar('\ufb39', name='Yod with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb39'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YOD_HIRIQ","title":"<code>YOD_HIRIQ = HebrewChar('\ufb1d', name='Yod with Hiriq')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb1d'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YOD_TRIANGLE","title":"<code>YOD_TRIANGLE = HebrewChar(char='\u05ef', name='Yod Triangle', name_alts=['Yud Triangle'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05ef'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YOD_YOD_PATAH","title":"<code>YOD_YOD_PATAH = YiddishChar('\ufb1f', name='Yod Yod Patah')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letter <code>'\ufb1f'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YOD_YOD_PATAH2","title":"<code>YOD_YOD_PATAH2 = YiddishChar('\u05f2\u05b7', name='Yod Yod Patah')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letters <code>'\u05f2\u05b7'</code>. This is a variation of YOD_YOD_PATAH made up of a double Yud, and a Patah.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YUD","title":"<code>YUD = YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>YOD</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YUD_TRIANGLE","title":"<code>YUD_TRIANGLE = YOD_TRIANGLE</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>YOD_TRIANGLE</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ZAQEF_GADOL","title":"<code>ZAQEF_GADOL = TaamimChar(char='\u0595', name='Zaqef Gadol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0595'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ZAQEF_QATAN","title":"<code>ZAQEF_QATAN = TaamimChar(char='\u0594', name='Zaqef Qatan')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0594'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ZARQA","title":"<code>ZARQA = TaamimChar(char='\u0598', name='Zarqa')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0598'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ZAYIN","title":"<code>ZAYIN = HebrewChar(char='\u05d6', name='Zayin', hebrew_name='\u05d6\u05b7\u05d9\u05b4\u05df')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d6'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ZAYIN_DAGESH","title":"<code>ZAYIN_DAGESH = HebrewChar('\ufb36', name='Zayin with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb36'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.ZINOR","title":"<code>ZINOR = TaamimChar(char='\u05ae', name='Zinor')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05ae'</code>.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar","title":"<code>BaseHebrewChar</code>  <code>dataclass</code>","text":"<p>Base class with the metadata that all Hebrew characters share. This class should be used internally by <code>hebrew.Chars</code> only.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass BaseHebrewChar:\n    \"\"\"\n    Base class with the metadata that all Hebrew characters share.\n    This class should be used internally by `hebrew.Chars` only.\n    \"\"\"\n\n    char: str\n    \"\"\"Unicode character(s) for this class instance.\"\"\"\n\n    name: str\n    \"\"\"Primary name of the character in English.\"\"\"\n\n    hebrew_name: Optional[str] = None\n    \"\"\"\n    Primary name of the character in Hebrew.\n\n    The choice of primary name is non trivial as it is used as the primary spelling \n    for the Mispar Shemi Gematria method.\n    \"\"\"\n\n    name_alts: Optional[List[str]] = None\n    \"\"\"Alternative names of the character in English.\"\"\"\n\n    hebrew_name_alts: Optional[List[str]] = None\n    \"\"\"Alternative names of the character in Hebrew.\"\"\"\n\n    @property\n    def hebrew_names(self) -&gt; List[str]:\n        \"\"\"\n        All Hebrew names for this character.\n        :return: A list of all Hebrew names for this character made up of the `hebrew_name` and `hebrew_name_alts`.\n        \"\"\"\n        return [self.hebrew_name] + (self.hebrew_name_alts or [])\n\n    @property\n    def names(self) -&gt; List[str]:\n        \"\"\"\n        All english names for this character.\n        :return: A list of all english names for this character made up of the `name` and `name_alts`.\n        \"\"\"\n        return [self.name] + (self.name_alts or [])\n\n    def __str__(self):\n        return self.char\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.char","title":"<code>char: str</code>  <code>instance-attribute</code>","text":"<p>Unicode character(s) for this class instance.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.hebrew_name","title":"<code>hebrew_name: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Primary name of the character in Hebrew.</p> <p>The choice of primary name is non trivial as it is used as the primary spelling  for the Mispar Shemi Gematria method.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.hebrew_name_alts","title":"<code>hebrew_name_alts: Optional[List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alternative names of the character in Hebrew.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.hebrew_names","title":"<code>hebrew_names: List[str]</code>  <code>property</code>","text":"<p>All Hebrew names for this character.</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>A list of all Hebrew names for this character made up of the <code>hebrew_name</code> and <code>hebrew_name_alts</code>.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>Primary name of the character in English.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.name_alts","title":"<code>name_alts: Optional[List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alternative names of the character in English.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.names","title":"<code>names: List[str]</code>  <code>property</code>","text":"<p>All english names for this character.</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>A list of all english names for this character made up of the <code>name</code> and <code>name_alts</code>.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar","title":"<code>HebrewChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing characters that are part of the Hebrew alphabet (to the exclusion of Nekuds, etc).</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass HebrewChar(BaseHebrewChar):\n    \"\"\"\n    A class representing characters that are part of the Hebrew alphabet (to the exclusion of Nekuds, etc).\n    \"\"\"\n\n    final_letter: bool = False\n    \"\"\"Whether or not the letter is a \"final\" or \"Sofit\" letter.\"\"\"\n\n    @property\n    def base_letter(self) -&gt; \"HebrewChar\":\n        \"\"\"\n        Returns the base letter of the character.\n\n        This library provides HebrewChar values for both standard Hebrew letters and user-perceived letters such as \"\u05d1\u05bc\".\n        This property will always return the base letter of the HebrewChar instance, in the above example, \"\u05d1\".\n\n        :return: An instance of `HebrewChar` representing a single unicode character; the base letter of\n         this instance of `HebrewChar`.\n        \"\"\"\n        return CHARS[self.char[0]]\n\n    @property\n    def mispar_hechrachi(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_hechrachi method of gematria.\n        \"\"\"\n        return MISPAR_HECHRACHI.get(self.base_letter.char)\n\n    @property\n    def mispar_gadol(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_gadol method of gematria.\n        \"\"\"\n        return MISPAR_GADOL.get(self.base_letter.char)\n\n    @property\n    def mispar_siduri(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_siduri method of gematria.\n        \"\"\"\n        return MISPAR_SIDURI.get(self.base_letter.char)\n\n    @property\n    def mispar_katan(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_katan method of gematria.\n        \"\"\"\n        return MISPAR_KATAN.get(self.base_letter.char)\n\n    @property\n    def mispar_perati(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_perati method of gematria.\n        \"\"\"\n        return MISPAR_PERATI.get(self.base_letter.char)\n\n    @property\n    def atbash(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the AtBash method of gematria.\n        \"\"\"\n        return ATBASH.get(self.base_letter.char)\n\n    @property\n    def albam(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the AtBash method of gematria.\n        \"\"\"\n        return ALBAM.get(self.base_letter.char)\n\n    @property\n    def mispar_meshulash(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the AtBash method of gematria.\n        \"\"\"\n        return MISPAR_MESHULASH.get(self.base_letter.char)\n\n    @property\n    def mispar_kidmi(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_kidmi method of gematria.\n        \"\"\"\n        return MISPAR_KIDMI.get(self.base_letter.char)\n\n    @property\n    def mispar_mispari(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_mispari method of gematria.\n        \"\"\"\n        return MISPAR_MISPARI.get(self.base_letter.char)\n\n    @property\n    def ayak_bachar(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the ayak_bachar method of gematria.\n        \"\"\"\n        return AYAK_BACHAR.get(self.base_letter.char)\n\n    @property\n    def ofanim(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the ofanim method of gematria.\n        \"\"\"\n        return OFANIM.get(self.base_letter.char)\n\n    @property\n    def achas_beta(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the achas_beta method of gematria.\n        \"\"\"\n        return ACHAS_BETA.get(self.base_letter.char)\n\n    @property\n    def avgad(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the avgad method of gematria.\n        \"\"\"\n        return AVGAD.get(self.base_letter.char)\n\n    @property\n    def reverse_avgad(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the reverse_avgad method of gematria.\n        \"\"\"\n        return REVERSE_AVGAD.get(self.base_letter.char)\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"HebrewChar\"]:\n        \"\"\"\n        Searches for an instance of `HebrewChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `HebrewChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, HEBREW_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.achas_beta","title":"<code>achas_beta: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the achas_beta method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.albam","title":"<code>albam: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the AtBash method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.atbash","title":"<code>atbash: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the AtBash method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.avgad","title":"<code>avgad: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the avgad method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.ayak_bachar","title":"<code>ayak_bachar: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the ayak_bachar method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.base_letter","title":"<code>base_letter: HebrewChar</code>  <code>property</code>","text":"<p>Returns the base letter of the character.</p> <p>This library provides HebrewChar values for both standard Hebrew letters and user-perceived letters such as \"\u05d1\u05bc\". This property will always return the base letter of the HebrewChar instance, in the above example, \"\u05d1\".</p> <p>Returns:</p> <ul> <li> <code>HebrewChar</code>           \u2013            <p>An instance of <code>HebrewChar</code> representing a single unicode character; the base letter of this instance of <code>HebrewChar</code>.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.final_letter","title":"<code>final_letter: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether or not the letter is a \"final\" or \"Sofit\" letter.</p>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.mispar_gadol","title":"<code>mispar_gadol: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_gadol method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.mispar_hechrachi","title":"<code>mispar_hechrachi: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_hechrachi method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.mispar_katan","title":"<code>mispar_katan: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_katan method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.mispar_kidmi","title":"<code>mispar_kidmi: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_kidmi method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.mispar_meshulash","title":"<code>mispar_meshulash: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the AtBash method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.mispar_mispari","title":"<code>mispar_mispari: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_mispari method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.mispar_perati","title":"<code>mispar_perati: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_perati method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.mispar_siduri","title":"<code>mispar_siduri: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_siduri method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.ofanim","title":"<code>ofanim: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the ofanim method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.reverse_avgad","title":"<code>reverse_avgad: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the reverse_avgad method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.HebrewChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>HebrewChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[HebrewChar]</code>           \u2013            <p>An instance of <code>HebrewChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"HebrewChar\"]:\n    \"\"\"\n    Searches for an instance of `HebrewChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `HebrewChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, HEBREW_CHARS)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.NiqqudChar","title":"<code>NiqqudChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing Niqqud characters used in Hebrew and Yiddish text.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass NiqqudChar(BaseHebrewChar):\n    \"\"\"\n    A class representing Niqqud characters used in Hebrew and Yiddish text.\n    \"\"\"\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"NiqqudChar\"]:\n        \"\"\"\n        Searches for an instance of `NiqqudChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `NiqqudChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, NIQQUD_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.NiqqudChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>NiqqudChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[NiqqudChar]</code>           \u2013            <p>An instance of <code>NiqqudChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"NiqqudChar\"]:\n    \"\"\"\n    Searches for an instance of `NiqqudChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `NiqqudChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, NIQQUD_CHARS)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.OtherChar","title":"<code>OtherChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing the \"other\" or \"uncharacterized\" characters used in Hebrew (and Yiddish) text.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass OtherChar(BaseHebrewChar):\n    \"\"\"\n    A class representing the \"other\" or \"uncharacterized\" characters used in Hebrew (and Yiddish) text.\n    \"\"\"\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"OtherChar\"]:\n        \"\"\"\n        Searches for an instance of `TaamimChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `OtherChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, OTHER_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.OtherChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>TaamimChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[OtherChar]</code>           \u2013            <p>An instance of <code>OtherChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"OtherChar\"]:\n    \"\"\"\n    Searches for an instance of `TaamimChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `OtherChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, OTHER_CHARS)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TaamimChar","title":"<code>TaamimChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing the \"Trup\" or Hebrew cantillation characters used alongside Hebrew letters.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass TaamimChar(BaseHebrewChar):\n    \"\"\"\n    A class representing the \"Trup\" or [Hebrew cantillation](https://en.wikipedia.org/wiki/Hebrew_cantillation)\n    characters used alongside Hebrew letters.\n    \"\"\"\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"TaamimChar\"]:\n        \"\"\"\n        Searches for an instance of `TaamimChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `TaamimChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, TAAMIM_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.TaamimChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>TaamimChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[TaamimChar]</code>           \u2013            <p>An instance of <code>TaamimChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"TaamimChar\"]:\n    \"\"\"\n    Searches for an instance of `TaamimChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `TaamimChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, TAAMIM_CHARS)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YiddishChar","title":"<code>YiddishChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing special characters used in Yiddish text.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass YiddishChar(BaseHebrewChar):\n    \"\"\"\n    A class representing special characters used in Yiddish text.\n    \"\"\"\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"YiddishChar\"]:\n        \"\"\"\n        Searches for an instance of `YiddishChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `YiddishChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, YIDDISH_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.YiddishChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>YiddishChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[YiddishChar]</code>           \u2013            <p>An instance of <code>YiddishChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"YiddishChar\"]:\n    \"\"\"\n    Searches for an instance of `YiddishChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `YiddishChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, YIDDISH_CHARS)\n</code></pre>"},{"location":"code_reference/chars/classes_and_functions/#hebrew.chars.char_search","title":"<code>char_search(char_name, char_list=None)</code>","text":"<p>Search for a character by its name.</p> <p>Character classes contain alternate names which are supported by this function! Currently, only english names are supported. TODO: Support search in hebrew, which will need to support hebrew text with or without nikud.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A string containing the name of the character to search for.</p> </li> <li> <code>char_list</code>               (<code>Optional[List[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]]]</code>, default:                   <code>None</code> )           \u2013            <p>A list of <code>BaseHebrewChar</code> characters to use for this search. When None, defaults to all characters (ALL_CHARS).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]]</code>           \u2013            </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>def char_search(\n    char_name: str,\n    char_list: Optional[\n        List[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]]\n    ] = None,\n) -&gt; Optional[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]]:\n    \"\"\"\n    Search for a character by its name.\n\n    Character classes contain alternate names which are supported by this function!\n    Currently, only english names are supported.\n    TODO: Support search in hebrew, which will need to support hebrew text with or without nikud.\n\n    :param char_name: A string containing the name of the character to search for.\n    :param char_list: A list of `BaseHebrewChar` characters to use for this search.\n    When None, defaults to all characters (ALL_CHARS).\n    :return:\n    \"\"\"\n    char_list = char_list if char_list else ALL_CHARS\n    for char in char_list:\n        if char_name.lower() in [n.lower() for n in char.names]:\n            return CHARS[char.char]\n    return None\n</code></pre>"},{"location":"code_reference/chars/constants/","title":"Constants","text":"<p>Constants for each Hebrew character and classes to represent them, and metadata about them.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ALEF_MAPIQ","title":"<code>ALEF_MAPIQ = HebrewChar('\ufb30', name='Alef with Mapiq')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb30'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ALEF_PATAH","title":"<code>ALEF_PATAH = HebrewChar('\ufb2e', name='Alef with Patah')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2e'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ALEF_QAMATZ","title":"<code>ALEF_QAMATZ = HebrewChar('\ufb2f', name='Alef with Qamats')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2f'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ALEF_WIDE","title":"<code>ALEF_WIDE = HebrewChar('\ufb21', name='Wide Alef')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb21'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ALEPH","title":"<code>ALEPH = HebrewChar(char='\u05d0', name='Aleph', hebrew_name='\u05d0\u05b8\u05dc\u05b6\u05e3', name_alts=['Alef'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d0'</code></p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ALEPH_LAMED","title":"<code>ALEPH_LAMED = HebrewChar('\ufb4f', name='Alef Lamed')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4f'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ALEPH_SYMBOL","title":"<code>ALEPH_SYMBOL = HebrewChar('\u2135', name='Aleph Symbol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u2135'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ALL_CHARS","title":"<code>ALL_CHARS: List[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]] = [ALEPH, BET, VET, GIMEL, DALET, HE, VAV, ZAYIN, CHET, TET, YOD, CAF, KAF_SOFIT, CHAF, CHAF_SOFIT, LAMED, MEM, MEM_SOFIT, NUN, NUN_SOFIT, SAMEKH, AYIN, PE, FE, PE_SOFIT, FE_SOFIT, TSADI, TSADI_SOFIT, QOF, RESH, SHIN, SIN, PLAIN_SIN, TAV, SAV, DOUBLE_YOD, DOUBLE_VAV, VAV_YOD, SIN_DOT, SHIN_DOT, DAGESH, QUBUTS, SHURUK, HOLAM, QAMATS, PATAH, SEGOL, TSERE, HIRIQ, HATAF_QAMATS, HATAF_PATAH, HATAF_SEGOL, SHEVA, UPPER_DOT, MAQAF, PASEQ, SOF_PASSUK, ETNAHTA, SEGOL_TOP, SHALSHELET, ZAQEF_QATAN, ZAQEF_GADOL, TIFCHA, REVIA, ZINOR, PASHTA, PASHTA_2, YETIV, TEVIR, PAZER, TELISHA_GEDOLA, TELISHA_KETANNAH, GERESH, AZLA_GERESH, GERSHAYIM, GERSHAYIM_2, MERCHA, MUNACH, MAHPACH, DARGA, MERCHA_KEFULA, YERACH_BEN_YOMO, MASORA, DEHI, ZARQA, GERESH_MUQDAM, QARNEY_PARA, OLA, ILUY, RAFE, METEG, ATNAH_HAFUKH, HOLAM_HASER, LOWER_DOT, INVERTED_NUN, ALEPH_SYMBOL, BET_SYMBOL, GIMEL_SYMBOL, DALET_SYMBOL, YOD_HIRIQ, YOD_YOD_PATAH, YOD_YOD_PATAH2, AYIN_ALT, ALEF_WIDE, DALET_WIDE, HE_WIDE, KAF_WIDE, LAMED_WIDE, FINAL_MEM_WIDE, RESH_WIDE, TAV_WIDE, SHIN_SHIN_DOT, SHIN_SIN_DOT, SHIN_DAGESH_SHIN_DOT, SHIN_DAGESH_SIN_DOT, ALEF_PATAH, ALEF_QAMATZ, ALEF_MAPIQ, BET_DAGESH, GIMEL_DAGESH, DALET_DAGESH, HE_MAPIQ, VAV_DAGESH, ZAYIN_DAGESH, TET_DAGESH, YOD_DAGESH, FINAL_KAF_DAGESH, KAF_DAGESH, LAMED_DAGESH, MEM_DAGESH, NUN_DAGESH, SAMEKH_DAGESH, FINAL_PE_DAGESH, PE_DAGESH, TSADI_DAGESH, QOF_DAGESH, RESH_DAGESH, SHIN_DAGESH, TAV_DAGESH, VAV_HOLAM, BET_RAFE, KAF_RAFE, PE_RAFE, ALEPH_LAMED, QAMATS_KATAN, YOD_TRIANGLE, JUDEO_SPANISH_VARIKA, ALTERNATIVE_PLUS_SIGN]</code>  <code>module-attribute</code>","text":"<p>Every instance of a character class. This is used for defining collections with list comprehensions based on the Chars metadata. It can be relied on as being a complete list of Unicode characters used in Hebrew (and Yiddish etc).</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ALTERNATIVE_PLUS_SIGN","title":"<code>ALTERNATIVE_PLUS_SIGN = OtherChar(char='\ufb29', name='Alternative Plus Sign')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>OtherChar</code> representing the character <code>'\ufb29'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ATNAH_HAFUKH","title":"<code>ATNAH_HAFUKH = TaamimChar(char='\u05a2', name='Atnah Hafukh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a2'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.AYIN","title":"<code>AYIN = HebrewChar(char='\u05e2', name='Ayin', hebrew_name='\u05e2\u05b7\u05d9\u05b4\u05df')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e2'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.AYIN_ALT","title":"<code>AYIN_ALT = HebrewChar('\ufb20', name='Alternative Ayin')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb20'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.AZLA_GERESH","title":"<code>AZLA_GERESH = TaamimChar(char='\u059c', name='Azla Geresh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059c'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BES","title":"<code>BES = BET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>BET</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BET","title":"<code>BET = HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', hebrew_name_alts=['\u05d1\u05ea'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d1\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BET_DAGESH","title":"<code>BET_DAGESH = HebrewChar('\ufb31', name='Bet with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb31'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BET_RAFE","title":"<code>BET_RAFE = HebrewChar('\ufb4c', name='Bet with Rafe')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4c'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BET_SYMBOL","title":"<code>BET_SYMBOL = HebrewChar('\u2136', name='Bet Symbol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u2136'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.CAF","title":"<code>CAF = HebrewChar(char='\u05db\u05bc', name='Kaf', hebrew_name='\u05db\u05b7\u05bc\u05e3')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05db\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.CHAF","title":"<code>CHAF = HebrewChar(char='\u05db', name='Chaf', hebrew_name='\u05db\u05b7\u05e3')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05db'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.CHAF_SOFIT","title":"<code>CHAF_SOFIT = HebrewChar(char='\u05da', name='Chaf Sofit', final_letter=True, hebrew_name='\u05db\u05b7\u05e3 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Chaf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05da'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.CHARS","title":"<code>CHARS: Dict[str, Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]] = {c.char: cfor c in ALL_CHARS}</code>  <code>module-attribute</code>","text":"<p>A dict of all instances of all supported Char types where the key is the char and the value is an instance of BaseHebrewChar. This is useful for when you have a hebrew char and want to get its metadata class.</p> <pre><code>assert CHARS['\u05d0'] == ALEPH\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.CHES","title":"<code>CHES = CHET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>CHET</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.CHET","title":"<code>CHET = HebrewChar(char='\u05d7', name='Chet', hebrew_name='\u05d7\u05b5\u05d9\u05ea', hebrew_name_alts=['\u05d7\u05ea'], name_alts=['Het', 'Ches'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d6'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.CHIRIK","title":"<code>CHIRIK = HIRIQ</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>HIRIQ</code></p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DAGESH","title":"<code>DAGESH = NiqqudChar(char='\u05bc', name='Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05bc'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DALED","title":"<code>DALED = DALET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>DALET</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DALET","title":"<code>DALET = HebrewChar(char='\u05d3', name='Dalet', hebrew_name='\u05d3\u05b8\u05dc\u05b6\u05ea', hebrew_name_alts=['\u05d3\u05dc\u05d9\u05ea'], name_alts=['Daled'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d3'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DALET_DAGESH","title":"<code>DALET_DAGESH = HebrewChar('\ufb33', name='Dalet with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb33'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DALET_SYMBOL","title":"<code>DALET_SYMBOL = HebrewChar('\u2138', name='Dalet Symbol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u2138'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DALET_WIDE","title":"<code>DALET_WIDE = HebrewChar('\ufb22', name='Wide Dalet')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb22'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DARGA","title":"<code>DARGA = TaamimChar(char='\u05a7', name='Darga')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a7'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DEHI","title":"<code>DEHI = TaamimChar(char='\u05ad', name='Dehi')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05ad'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DOUBLE_VAV","title":"<code>DOUBLE_VAV = YiddishChar(char='\u05f0', name='Double Vav', name_alts=['Double Vuv'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letter <code>'\u05f0'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DOUBLE_VUV","title":"<code>DOUBLE_VUV = DOUBLE_VAV</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>DOUBLE_VAV</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DOUBLE_YOD","title":"<code>DOUBLE_YOD = YiddishChar(char='\u05f2', name='Double Yod', name_alts=['Saf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letter <code>'\u05f2'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.DOUBLE_YUD","title":"<code>DOUBLE_YUD = DOUBLE_YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>DOUBLE_YOD</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ETNAHTA","title":"<code>ETNAHTA = TaamimChar(char='\u0591', name='Etnahta')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0591'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FE","title":"<code>FE = HebrewChar(char='\u05e4', name='Fe', hebrew_name='\u05e4\u05b5\u05d0', hebrew_name_alts=['\u05e4\u05d9', '\u05e4\u05d4'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e4'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FE_SOFIT","title":"<code>FE_SOFIT = HebrewChar(char='\u05e3', name='Fe Sofit', final_letter=True, hebrew_name='\u05e4\u05b5\u05d0 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Fe'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e3'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_CHAF","title":"<code>FINAL_CHAF = CHAF_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>CHAF_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_FE","title":"<code>FINAL_FE = FE_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>FE_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_KAF","title":"<code>FINAL_KAF = KAF_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>KAF_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_KAF_DAGESH","title":"<code>FINAL_KAF_DAGESH = HebrewChar('\ufb3a', name='Final Kaf with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb3a'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_LETTERS","title":"<code>FINAL_LETTERS: List[HebrewChar] = [c for c in ALL_CHARS if isinstance(c, HebrewChar) and c.final_letter and len(c.char) == 1]</code>  <code>module-attribute</code>","text":"<p>A list of all Hebrew characters that are final letters. While we do have letters like '\u05e3\u05bc' defined, they do not return in this array; it contains only the plain final letters.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_MEM","title":"<code>FINAL_MEM = MEM_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>MEM_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_MEM_WIDE","title":"<code>FINAL_MEM_WIDE = HebrewChar('\ufb26', name='Wide Final Mem')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb26'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_MINOR_LETTER_MAPPINGS","title":"<code>FINAL_MINOR_LETTER_MAPPINGS: Dict[str, str] = {'\u05db': '\u05da', '\u05da': '\u05db', '\u05de': '\u05dd', '\u05dd': '\u05de', '\u05e0': '\u05df', '\u05df': '\u05e0', '\u05e4': '\u05e3', '\u05e3': '\u05e4', '\u05e6': '\u05e5', '\u05e5': '\u05e6'}</code>  <code>module-attribute</code>","text":"<p>A map of final letters to their regular counterparts, and vice versa.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_NUN","title":"<code>FINAL_NUN = NUN_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>NUN_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_PE","title":"<code>FINAL_PE = PE_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>PE_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_PE_DAGESH","title":"<code>FINAL_PE_DAGESH = HebrewChar('\ufb43', name='Final Pe with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb43'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_TSADI","title":"<code>FINAL_TSADI = TSADI_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.FINAL_TZADIK","title":"<code>FINAL_TZADIK = TSADI_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.GERESH","title":"<code>GERESH = OtherChar(char='\u05f3', name='Geresh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>OtherChar</code> representing the character <code>'\u05f3'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.GERESH_MUQDAM","title":"<code>GERESH_MUQDAM = TaamimChar(char='\u059d', name='Geresh Muqdam')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059d'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.GERSHAYIM","title":"<code>GERSHAYIM = OtherChar(char='\u05f4', name='Gershayim')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>OtherChar</code> representing the character <code>'\u05f4'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.GERSHAYIM_2","title":"<code>GERSHAYIM_2 = TaamimChar(char='\u059e', name='Gershayim 2')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059e'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.GIMEL","title":"<code>GIMEL = HebrewChar(char='\u05d2', name='Gimel', hebrew_name='\u05d2\u05b4\u05d9\u05de\u05b5\u05dc', hebrew_name_alts=['\u05d2\u05de\u05dc'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d2'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.GIMEL_DAGESH","title":"<code>GIMEL_DAGESH = HebrewChar('\ufb32', name='Gimel with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb32'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.GIMEL_SYMBOL","title":"<code>GIMEL_SYMBOL = HebrewChar('\u2137', name='Gimel Symbol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u2137'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HATAF_PATAH","title":"<code>HATAF_PATAH = NiqqudChar(char='\u05b2', name='Hataf Patah', name_alts=['Hataf Patach'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b2'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HATAF_QAMATS","title":"<code>HATAF_QAMATS = NiqqudChar(char='\u05b3', name='Hataf Qamatz', name_alts=['Hataf Kumatz'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b3'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HATAF_SEGOL","title":"<code>HATAF_SEGOL = NiqqudChar(char='\u05b1', name='Hataf Segol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b1'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HE","title":"<code>HE = HebrewChar(char='\u05d4', name='He', hebrew_name='\u05d4\u05b5\u05d0', hebrew_name_alts=['\u05d4\u05d9', '\u05d4\u05d4'], name_alts=['Hei', 'Hey'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d4'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HEBREW_CHARS","title":"<code>HEBREW_CHARS: List[HebrewChar] = [c for c in ALL_CHARS if isinstance(c, HebrewChar) and c.char in '\u05d0\u05d1\u05d2\u05d3\u05d4\u05d5\u05d6\u05d7\u05d8\u05d9\u05db\u05da\u05dc\u05de\u05dd\u05e0\u05df\u05e1\u05e2\u05e4\u05e3\u05e6\u05e5\u05e7\u05e8\u05e9\u05ea']</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>HebrewChar</code>. This will include letters like '\u05e3\u05bc'</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HEI","title":"<code>HEI = HE</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>HE</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HET","title":"<code>HET = CHET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>CHET</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HEY","title":"<code>HEY = HE</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>HE</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HE_MAPIQ","title":"<code>HE_MAPIQ = HebrewChar('\ufb34', name='He with Mapiq')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb34'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HE_WIDE","title":"<code>HE_WIDE = HebrewChar('\ufb23', name='Wide He')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb23'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HIRIQ","title":"<code>HIRIQ = NiqqudChar(char='\u05b4', name='Hiriq', name_alts=['Chirik'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b4'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HOLAM","title":"<code>HOLAM = NiqqudChar(char='\u05b9', name='Holam')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b9'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HOLAM_HASER","title":"<code>HOLAM_HASER = NiqqudChar(char='\u05ba', name='Holam Haser')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05ba'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ILUY","title":"<code>ILUY = TaamimChar(char='\u05ac', name='Iluy')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05ac'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.INVERTED_NUN","title":"<code>INVERTED_NUN = OtherChar(char='\u05c6', name='Inverted Nun', hebrew_name='\u05e0\u05d5\"\u05df \u05de\u05e0\u05d5\u05d6\u05e8\u05ea', name_alts=['Nun Hafukha'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>OtherChar</code> representing the letter <code>'\u05c6'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.JUDEO_SPANISH_VARIKA","title":"<code>JUDEO_SPANISH_VARIKA = TaamimChar(char='\ufb1e', name='Judeo-Spanish Varika')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\ufb1e'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.KAF_DAGESH","title":"<code>KAF_DAGESH = HebrewChar('\ufb3b', name='Kaf with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb3b'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.KAF_RAFE","title":"<code>KAF_RAFE = HebrewChar('\ufb4d', name='Kaf with Rafe')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4d'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.KAF_SOFIT","title":"<code>KAF_SOFIT = HebrewChar(char='\u05da\u05bc', name='Kaf Sofit', final_letter=True, hebrew_name='\u05db\u05b7\u05bc\u05e3 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Kaf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05da\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.KAF_WIDE","title":"<code>KAF_WIDE = HebrewChar('\ufb24', name='Wide Kaf')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb24'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.KUBUTZ","title":"<code>KUBUTZ = QUBUTS</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>QUBUTS</code></p>"},{"location":"code_reference/chars/constants/#hebrew.chars.KUF","title":"<code>KUF = QOF</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.KUMATZ","title":"<code>KUMATZ = QAMATS</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>QAMATS</code></p>"},{"location":"code_reference/chars/constants/#hebrew.chars.LAMED","title":"<code>LAMED = HebrewChar(char='\u05dc', name='Lamed', hebrew_name='\u05dc\u05b8\u05de\u05b6\u05d3', name_alts=['Lamid'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05dc'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.LAMED_DAGESH","title":"<code>LAMED_DAGESH = HebrewChar('\ufb3c', name='Lamed with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb3c'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.LAMED_WIDE","title":"<code>LAMED_WIDE = HebrewChar('\ufb25', name='Wide Lamed')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb25'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.LAMID","title":"<code>LAMID = LAMED</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>LAMED</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.LOWER_DOT","title":"<code>LOWER_DOT = NiqqudChar(char='\u05c5', name='Lower Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c5'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.MAHPACH","title":"<code>MAHPACH = TaamimChar(char='\u05a4', name='Mahpach')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a4'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.MAQAF","title":"<code>MAQAF = OtherChar(char='\u05be', name='Maqaf')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the character <code>'\u05be'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.MASORA","title":"<code>MASORA = TaamimChar(char='\u05af', name='Masora')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05af'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.MEM","title":"<code>MEM = HebrewChar(char='\u05de', name='Mem', hebrew_name='\u05de\u05b5\u05dd')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05de'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.MEM_DAGESH","title":"<code>MEM_DAGESH = HebrewChar('\ufb3e', name='Mem with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb3e'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.MEM_SOFIT","title":"<code>MEM_SOFIT = HebrewChar(char='\u05dd', name='Mem Sofit', final_letter=True, hebrew_name='\u05de\u05b5\u05dd \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Mem'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05dd'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.MERCHA","title":"<code>MERCHA = TaamimChar(char='\u05a5', name='Mercha')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a5'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.MERCHA_KEFULA","title":"<code>MERCHA_KEFULA = TaamimChar(char='\u05a6', name='Mercha Kefula')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a6'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.METEG","title":"<code>METEG = TaamimChar(char='\u05bd', name='Meteg')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05bd'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.MUNACH","title":"<code>MUNACH = TaamimChar(char='\u05a3', name='Munach')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a3'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.NIQQUD_CHARS","title":"<code>NIQQUD_CHARS: List[NiqqudChar] = [c for c in ALL_CHARS if isinstance(c, NiqqudChar)]</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>NiqqudChar</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.NUN","title":"<code>NUN = HebrewChar(char='\u05e0', name='Nun', hebrew_name='\u05e0\u05d5\u05bc\u05df')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e0'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.NUN_DAGESH","title":"<code>NUN_DAGESH = HebrewChar('\ufb40', name='Nun with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb40'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.NUN_HAFUKHA","title":"<code>NUN_HAFUKHA = INVERTED_NUN</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>INVERTED_NUN</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.NUN_SOFIT","title":"<code>NUN_SOFIT = HebrewChar(char='\u05df', name='Nun Sofit', final_letter=True, hebrew_name='\u05e0\u05d5\u05bc\u05df \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Nun'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05df'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.OLA","title":"<code>OLA = TaamimChar(char='\u05ab', name='Ola')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05ab'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.OTHER_CHARS","title":"<code>OTHER_CHARS: List[OtherChar] = [c for c in ALL_CHARS if isinstance(c, OtherChar)]</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>OtherChar</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PASEQ","title":"<code>PASEQ = OtherChar(char='\u05c0', name='Paseq')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the character <code>'\u05c0'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PASHTA","title":"<code>PASHTA = TaamimChar(char='\u0599', name='Pashta')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0599'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PASHTA_2","title":"<code>PASHTA_2 = TaamimChar(char='\u05a8', name='Pashta 2', name_alts=['Qadma'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a8'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PATACH","title":"<code>PATACH = PATAH</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>PATAH</code></p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PATAH","title":"<code>PATAH = NiqqudChar(char='\u05b7', name='Patah', name_alts=['Patach'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b7'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PAZER","title":"<code>PAZER = TaamimChar(char='\u05a1', name='Pazer')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a1'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PAZER_GADOL","title":"<code>PAZER_GADOL = QARNEY_PARA</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>QARNEY_PARA</code> since they share the same Unicode character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PE","title":"<code>PE = HebrewChar(char='\u05e4\u05bc', name='Pe', hebrew_name_alts=['\u05e4\u05d9', '\u05e4\u05d4'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e4\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PE_DAGESH","title":"<code>PE_DAGESH = HebrewChar('\ufb44', name='Pe with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb44'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PE_RAFE","title":"<code>PE_RAFE = HebrewChar('\ufb4e', name='Pe with Rafe')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4e'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PE_SOFIT","title":"<code>PE_SOFIT = HebrewChar(char='\u05e3\u05bc', name='Fe Sofit', final_letter=True, hebrew_name='\u05e4\u05b5\u05bc\u05d0 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', name_alts=['Final Pe'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e3\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.PLAIN_SIN","title":"<code>PLAIN_SIN = HebrewChar(char='\u05e9', name='Plain Sin', hebrew_name='\u05e9\u05b4\u05c2\u05df', hebrew_name_alts=['\u05e9\u05b4\u05c2\u05d9\u05df'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e9'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.QADMA","title":"<code>QADMA = PASHTA_2</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>PASHTA_2</code> since they share the same Unicode character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.QAMATS","title":"<code>QAMATS = NiqqudChar(char='\u05b8', name='Qamats', name_alts=['Kumatz'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b8'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.QAMATS_KATAN","title":"<code>QAMATS_KATAN = NiqqudChar(char='\u05c7', name='Qamats Qatan', name_alts=['Kumatz Katan'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c7'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.QARNEY_PARA","title":"<code>QARNEY_PARA = TaamimChar(char='\u059f', name='Qarney Para', name_alts=['Pazer Gadol'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059f'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.QOF","title":"<code>QOF = HebrewChar(char='\u05e7', name='Qof', hebrew_name='\u05e7\u05d5\u05b9\u05e3', name_alts=['Kuf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e7'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.QOF_DAGESH","title":"<code>QOF_DAGESH = HebrewChar('\ufb47', name='Qof with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb47'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.QUBUTS","title":"<code>QUBUTS = NiqqudChar(char='\u05bb', name='Qubuts', name_alts=['Kubutz'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05bb'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.RAFE","title":"<code>RAFE = TaamimChar(char='\u05bf', name='Rafe')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05bf'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.RESH","title":"<code>RESH = HebrewChar(char='\u05e8', name='Resh', hebrew_name='\u05e8\u05b5\u05d9\u05e9\u05c1', hebrew_name_alts=['\u05e8\u05e9'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e8'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.RESH_DAGESH","title":"<code>RESH_DAGESH = HebrewChar('\ufb48', name='Resh with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb48'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.RESH_WIDE","title":"<code>RESH_WIDE = HebrewChar('\ufb27', name='Wide Resh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb27'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.REVIA","title":"<code>REVIA = TaamimChar(char='\u0597', name='Revia')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0597'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SAF","title":"<code>SAF = SAV</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>SAV</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SAMACH","title":"<code>SAMACH = SAMEKH</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>SAMEKH</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SAMEKH","title":"<code>SAMEKH = HebrewChar(char='\u05e1', name='Samekh', hebrew_name='\u05e1\u05b8\u05de\u05b6\u05da', name_alts=['Samach'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e1'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SAMEKH_DAGESH","title":"<code>SAMEKH_DAGESH = HebrewChar('\ufb41', name='Samekh with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb41'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SAV","title":"<code>SAV = HebrewChar(char='\u05ea', name='Sav', hebrew_name='\u05ea\u05b8\u05d5', name_alts=['Saf'], hebrew_name_alts=['\u05ea\u05d9\u05d5', '\u05ea\u05d0\u05d5'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05ea'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SEGOL","title":"<code>SEGOL = NiqqudChar(char='\u05b6', name='Segol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b6'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SEGOL_TOP","title":"<code>SEGOL_TOP = TaamimChar(char='\u0592', name='Segol Top')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0592'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHALSHELET","title":"<code>SHALSHELET = TaamimChar(char='\u0593', name='Shalshelet')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0593'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHEVA","title":"<code>SHEVA = NiqqudChar(char='\u05b0', name='Sheva', name_alts=['Shivah'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b0'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHIN","title":"<code>SHIN = HebrewChar(char='\u05e9\u05c1', name='Shin', hebrew_name='\u05e9\u05b4\u05c1\u05df', hebrew_name_alts=['\u05e9\u05b4\u05c1\u05d9\u05df'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e9\u05c1'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHIN_DAGESH","title":"<code>SHIN_DAGESH = HebrewChar('\ufb49', name='Shin with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb49'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHIN_DAGESH_SHIN_DOT","title":"<code>SHIN_DAGESH_SHIN_DOT = HebrewChar('\ufb2c', name='Shin with Dagesh and Shin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2c'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHIN_DAGESH_SIN_DOT","title":"<code>SHIN_DAGESH_SIN_DOT = HebrewChar('\ufb2d', name='Shin with Dagesh and Sin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2d'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHIN_DOT","title":"<code>SHIN_DOT = NiqqudChar(char='\u05c1', name='Shin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c1'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHIN_SHIN_DOT","title":"<code>SHIN_SHIN_DOT = HebrewChar('\ufb2a', name='Shin with Shin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2a'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHIN_SIN_DOT","title":"<code>SHIN_SIN_DOT = HebrewChar('\ufb2b', name='Shin with Sin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb2b'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHIVAH","title":"<code>SHIVAH = SHEVA</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>SHEVA</code></p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SHURUK","title":"<code>SHURUK = NiqqudChar(char='\u05d5\u05bc', name='Shuruk')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05d5\u05bc'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SIN","title":"<code>SIN = HebrewChar(char='\u05e9\u05c2', name='Sin', hebrew_name='\u05e9\u05b4\u05c2\u05df', hebrew_name_alts=['\u05e9\u05b4\u05c2\u05d9\u05df'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e9\u05c2'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SIN_DOT","title":"<code>SIN_DOT = NiqqudChar(char='\u05c2', name='Sin Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c2'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SOF_PASSUK","title":"<code>SOF_PASSUK = OtherChar(char='\u05c3', name='Sof Passuk')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the character <code>'\u05c3'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.SPECIAL_CHARACTER_NORMALIZED_MAPPING","title":"<code>SPECIAL_CHARACTER_NORMALIZED_MAPPING: Dict[BaseHebrewChar, Union[BaseHebrewChar, List[BaseHebrewChar]]] = {ALEPH_SYMBOL: ALEPH, BET_SYMBOL: VET, GIMEL_SYMBOL: GIMEL, DALET_SYMBOL: DALET, YOD_YOD_PATAH: [YOD, PATAH, YOD], YOD_YOD_PATAH2: [YOD, PATAH, YOD], AYIN_ALT: AYIN, ALEF_WIDE: ALEPH, DALET_WIDE: DALET, HE_WIDE: HE, KAF_WIDE: CHAF, LAMED_WIDE: LAMED, FINAL_MEM_WIDE: FINAL_MEM, RESH_WIDE: RESH, TAV_WIDE: SAV, SHIN_SIN_DOT: SIN, SHIN_DAGESH_SHIN_DOT: [SHIN, DAGESH], SHIN_DAGESH_SIN_DOT: [SIN, DAGESH], ALEPH_LAMED: [ALEPH, LAMED], DOUBLE_YOD: [YOD, YOD], DOUBLE_VAV: [VAV, VAV], VAV_YOD: [YOD, VAV]}</code>  <code>module-attribute</code>","text":"<p>A map of special characters to their normal spelled out equivalent. For example, \ufb4f becomes \u05d0\u05dc</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TAAMIM_CHARS","title":"<code>TAAMIM_CHARS: List[TaamimChar] = [c for c in ALL_CHARS if isinstance(c, TaamimChar)]</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>TaamimChar</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TAF","title":"<code>TAF = TAV</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TAV</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TAV","title":"<code>TAV = HebrewChar(char='\u05ea\u05bc', name='Tav', hebrew_name='\u05ea\u05bc\u05d5', hebrew_name_alts=['\u05ea\u05d9\u05d5', '\u05ea\u05d0\u05d5'], name_alts=['Taf'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05ea\u05bc'</code>. This is not strictly a letter, but is included because it is often treated as one.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TAV_DAGESH","title":"<code>TAV_DAGESH = HebrewChar('\ufb4a', name='Tav with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4a'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TAV_WIDE","title":"<code>TAV_WIDE = HebrewChar('\ufb28', name='Wide Tav')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb28'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TELISHA_GEDOLA","title":"<code>TELISHA_GEDOLA = TaamimChar(char='\u05a0', name='Telisha Gedola')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a0'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TELISHA_KETANNAH","title":"<code>TELISHA_KETANNAH = TaamimChar(char='\u05a9', name='Telisha Ketannah')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05a9'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TES","title":"<code>TES = TET</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TET</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TET","title":"<code>TET = HebrewChar(char='\u05d8', name='Tet', hebrew_name='\u05d8\u05b5\u05d9\u05ea', hebrew_name_alts=['\u05d8\u05ea'], name_alts=['Tes'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d8'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TET_DAGESH","title":"<code>TET_DAGESH = HebrewChar('\ufb38', name='Tet with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb38'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TEVIR","title":"<code>TEVIR = TaamimChar(char='\u059b', name='Tevir')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059b'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TIFCHA","title":"<code>TIFCHA = TaamimChar(char='\u0596', name='Tifcha')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0596'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TSADI","title":"<code>TSADI = HebrewChar(char='\u05e6', name='Tsadi', hebrew_name='\u05e6\u05b7\u05d3\u05b4\u05d9', hebrew_name_alts=['\u05e6\u05d3\u05d9\u05e7'], name_alts=['Tzadik'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e6'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TSADI_DAGESH","title":"<code>TSADI_DAGESH = HebrewChar('\ufb46', name='Tsadi with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb46'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TSADI_SOFIT","title":"<code>TSADI_SOFIT = HebrewChar(char='\u05e5', name='Tsadi Sofit', final_letter=True, hebrew_name='\u05e6\u05b7\u05d3\u05b4\u05d9 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea', hebrew_name_alts=['\u05e6\u05d3\u05d9\u05e7 \u05e1\u05d5\u05e4\u05d9\u05ea'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05e5'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TSERE","title":"<code>TSERE = NiqqudChar(char='\u05b5', name='Tsere')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05b5'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TZADIK","title":"<code>TZADIK = TSADI</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.TZADIK_SOFIT","title":"<code>TZADIK_SOFIT = TSADI_SOFIT</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>TSADI_SOFIT</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.UPPER_DOT","title":"<code>UPPER_DOT = NiqqudChar(char='\u05c4', name='Upper Dot')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>NiqqudChar</code> representing the Niqqud <code>'\u05c4'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.VAV","title":"<code>VAV = HebrewChar(char='\u05d5', name='Vav', hebrew_name='\u05d5\u05b8\u05d5', hebrew_name_alts=['\u05d5\u05d9\u05d5', '\u05d5\u05d0\u05d5'], name_alts=['Vuv'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d5'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.VAV_DAGESH","title":"<code>VAV_DAGESH = HebrewChar('\ufb35', name='Vav with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb35'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.VAV_HOLAM","title":"<code>VAV_HOLAM = HebrewChar('\ufb4b', name='Vav with Holam')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb4b'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.VAV_YOD","title":"<code>VAV_YOD = YiddishChar(char='\u05f1', name='Vav Yod')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letter <code>'\u05f1'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.VAV_YUD","title":"<code>VAV_YUD = VAV_YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>VAV_YOD</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.VET","title":"<code>VET = HebrewChar(char='\u05d1', name='Vet', hebrew_name='\u05d1\u05b5\u05d9\u05ea', hebrew_name_alts=['\u05d1\u05ea'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d1'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.VUV","title":"<code>VUV = VAV</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>VAV</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.VUV_YOD","title":"<code>VUV_YOD = VAV_YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>VAV_YOD</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.VUV_YUD","title":"<code>VUV_YUD = VAV_YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>VAV_YOD</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YERACH_BEN_YOMO","title":"<code>YERACH_BEN_YOMO = TaamimChar(char='\u05aa', name='Yerach Ben Yomo')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05aa'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YETIV","title":"<code>YETIV = TaamimChar(char='\u059a', name='Yetiv')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u059a'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YIDDISH_CHARS","title":"<code>YIDDISH_CHARS: List[YiddishChar] = [c for c in ALL_CHARS if isinstance(c, YiddishChar) and c.char in ['\u05f1', '\u05f0', '\u05f2']]</code>  <code>module-attribute</code>","text":"<p>A List of all instances of <code>YiddishChar</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YOD","title":"<code>YOD = HebrewChar(char='\u05d9', name='Yod', hebrew_name='\u05d9\u05d5\u05b9\u05d3', name_alts=['Yud'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d9'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YOD_DAGESH","title":"<code>YOD_DAGESH = HebrewChar('\ufb39', name='Yod with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb39'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YOD_HIRIQ","title":"<code>YOD_HIRIQ = HebrewChar('\ufb1d', name='Yod with Hiriq')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb1d'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YOD_TRIANGLE","title":"<code>YOD_TRIANGLE = HebrewChar(char='\u05ef', name='Yod Triangle', name_alts=['Yud Triangle'])</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05ef'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YOD_YOD_PATAH","title":"<code>YOD_YOD_PATAH = YiddishChar('\ufb1f', name='Yod Yod Patah')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letter <code>'\ufb1f'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YOD_YOD_PATAH2","title":"<code>YOD_YOD_PATAH2 = YiddishChar('\u05f2\u05b7', name='Yod Yod Patah')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>YiddishChar</code> representing the letters <code>'\u05f2\u05b7'</code>. This is a variation of YOD_YOD_PATAH made up of a double Yud, and a Patah.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YUD","title":"<code>YUD = YOD</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>YOD</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.YUD_TRIANGLE","title":"<code>YUD_TRIANGLE = YOD_TRIANGLE</code>  <code>module-attribute</code>","text":"<p>Simple pointer to <code>YOD_TRIANGLE</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ZAQEF_GADOL","title":"<code>ZAQEF_GADOL = TaamimChar(char='\u0595', name='Zaqef Gadol')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0595'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ZAQEF_QATAN","title":"<code>ZAQEF_QATAN = TaamimChar(char='\u0594', name='Zaqef Qatan')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0594'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ZARQA","title":"<code>ZARQA = TaamimChar(char='\u0598', name='Zarqa')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u0598'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ZAYIN","title":"<code>ZAYIN = HebrewChar(char='\u05d6', name='Zayin', hebrew_name='\u05d6\u05b7\u05d9\u05b4\u05df')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\u05d6'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ZAYIN_DAGESH","title":"<code>ZAYIN_DAGESH = HebrewChar('\ufb36', name='Zayin with Dagesh')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>HebrewChar</code> representing the letter <code>'\ufb36'</code>. This is a rarely used special character.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.ZINOR","title":"<code>ZINOR = TaamimChar(char='\u05ae', name='Zinor')</code>  <code>module-attribute</code>","text":"<p>An instance of <code>TaamimChar</code> representing the Ta'amim <code>'\u05ae'</code>.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BaseHebrewChar","title":"<code>BaseHebrewChar</code>  <code>dataclass</code>","text":"<p>Base class with the metadata that all Hebrew characters share. This class should be used internally by <code>hebrew.Chars</code> only.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass BaseHebrewChar:\n    \"\"\"\n    Base class with the metadata that all Hebrew characters share.\n    This class should be used internally by `hebrew.Chars` only.\n    \"\"\"\n\n    char: str\n    \"\"\"Unicode character(s) for this class instance.\"\"\"\n\n    name: str\n    \"\"\"Primary name of the character in English.\"\"\"\n\n    hebrew_name: Optional[str] = None\n    \"\"\"\n    Primary name of the character in Hebrew.\n\n    The choice of primary name is non trivial as it is used as the primary spelling \n    for the Mispar Shemi Gematria method.\n    \"\"\"\n\n    name_alts: Optional[List[str]] = None\n    \"\"\"Alternative names of the character in English.\"\"\"\n\n    hebrew_name_alts: Optional[List[str]] = None\n    \"\"\"Alternative names of the character in Hebrew.\"\"\"\n\n    @property\n    def hebrew_names(self) -&gt; List[str]:\n        \"\"\"\n        All Hebrew names for this character.\n        :return: A list of all Hebrew names for this character made up of the `hebrew_name` and `hebrew_name_alts`.\n        \"\"\"\n        return [self.hebrew_name] + (self.hebrew_name_alts or [])\n\n    @property\n    def names(self) -&gt; List[str]:\n        \"\"\"\n        All english names for this character.\n        :return: A list of all english names for this character made up of the `name` and `name_alts`.\n        \"\"\"\n        return [self.name] + (self.name_alts or [])\n\n    def __str__(self):\n        return self.char\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.BaseHebrewChar.char","title":"<code>char: str</code>  <code>instance-attribute</code>","text":"<p>Unicode character(s) for this class instance.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BaseHebrewChar.hebrew_name","title":"<code>hebrew_name: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Primary name of the character in Hebrew.</p> <p>The choice of primary name is non trivial as it is used as the primary spelling  for the Mispar Shemi Gematria method.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BaseHebrewChar.hebrew_name_alts","title":"<code>hebrew_name_alts: Optional[List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alternative names of the character in Hebrew.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BaseHebrewChar.hebrew_names","title":"<code>hebrew_names: List[str]</code>  <code>property</code>","text":"<p>All Hebrew names for this character.</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>A list of all Hebrew names for this character made up of the <code>hebrew_name</code> and <code>hebrew_name_alts</code>.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.BaseHebrewChar.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>Primary name of the character in English.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BaseHebrewChar.name_alts","title":"<code>name_alts: Optional[List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alternative names of the character in English.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.BaseHebrewChar.names","title":"<code>names: List[str]</code>  <code>property</code>","text":"<p>All english names for this character.</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>A list of all english names for this character made up of the <code>name</code> and <code>name_alts</code>.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar","title":"<code>HebrewChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing characters that are part of the Hebrew alphabet (to the exclusion of Nekuds, etc).</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass HebrewChar(BaseHebrewChar):\n    \"\"\"\n    A class representing characters that are part of the Hebrew alphabet (to the exclusion of Nekuds, etc).\n    \"\"\"\n\n    final_letter: bool = False\n    \"\"\"Whether or not the letter is a \"final\" or \"Sofit\" letter.\"\"\"\n\n    @property\n    def base_letter(self) -&gt; \"HebrewChar\":\n        \"\"\"\n        Returns the base letter of the character.\n\n        This library provides HebrewChar values for both standard Hebrew letters and user-perceived letters such as \"\u05d1\u05bc\".\n        This property will always return the base letter of the HebrewChar instance, in the above example, \"\u05d1\".\n\n        :return: An instance of `HebrewChar` representing a single unicode character; the base letter of\n         this instance of `HebrewChar`.\n        \"\"\"\n        return CHARS[self.char[0]]\n\n    @property\n    def mispar_hechrachi(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_hechrachi method of gematria.\n        \"\"\"\n        return MISPAR_HECHRACHI.get(self.base_letter.char)\n\n    @property\n    def mispar_gadol(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_gadol method of gematria.\n        \"\"\"\n        return MISPAR_GADOL.get(self.base_letter.char)\n\n    @property\n    def mispar_siduri(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_siduri method of gematria.\n        \"\"\"\n        return MISPAR_SIDURI.get(self.base_letter.char)\n\n    @property\n    def mispar_katan(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_katan method of gematria.\n        \"\"\"\n        return MISPAR_KATAN.get(self.base_letter.char)\n\n    @property\n    def mispar_perati(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_perati method of gematria.\n        \"\"\"\n        return MISPAR_PERATI.get(self.base_letter.char)\n\n    @property\n    def atbash(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the AtBash method of gematria.\n        \"\"\"\n        return ATBASH.get(self.base_letter.char)\n\n    @property\n    def albam(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the AtBash method of gematria.\n        \"\"\"\n        return ALBAM.get(self.base_letter.char)\n\n    @property\n    def mispar_meshulash(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the AtBash method of gematria.\n        \"\"\"\n        return MISPAR_MESHULASH.get(self.base_letter.char)\n\n    @property\n    def mispar_kidmi(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_kidmi method of gematria.\n        \"\"\"\n        return MISPAR_KIDMI.get(self.base_letter.char)\n\n    @property\n    def mispar_mispari(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the mispar_mispari method of gematria.\n        \"\"\"\n        return MISPAR_MISPARI.get(self.base_letter.char)\n\n    @property\n    def ayak_bachar(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the ayak_bachar method of gematria.\n        \"\"\"\n        return AYAK_BACHAR.get(self.base_letter.char)\n\n    @property\n    def ofanim(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the ofanim method of gematria.\n        \"\"\"\n        return OFANIM.get(self.base_letter.char)\n\n    @property\n    def achas_beta(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the achas_beta method of gematria.\n        \"\"\"\n        return ACHAS_BETA.get(self.base_letter.char)\n\n    @property\n    def avgad(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the avgad method of gematria.\n        \"\"\"\n        return AVGAD.get(self.base_letter.char)\n\n    @property\n    def reverse_avgad(self) -&gt; int:\n        \"\"\"\n        :return: The value of the character for use in the reverse_avgad method of gematria.\n        \"\"\"\n        return REVERSE_AVGAD.get(self.base_letter.char)\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"HebrewChar\"]:\n        \"\"\"\n        Searches for an instance of `HebrewChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `HebrewChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, HEBREW_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.achas_beta","title":"<code>achas_beta: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the achas_beta method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.albam","title":"<code>albam: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the AtBash method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.atbash","title":"<code>atbash: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the AtBash method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.avgad","title":"<code>avgad: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the avgad method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.ayak_bachar","title":"<code>ayak_bachar: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the ayak_bachar method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.base_letter","title":"<code>base_letter: HebrewChar</code>  <code>property</code>","text":"<p>Returns the base letter of the character.</p> <p>This library provides HebrewChar values for both standard Hebrew letters and user-perceived letters such as \"\u05d1\u05bc\". This property will always return the base letter of the HebrewChar instance, in the above example, \"\u05d1\".</p> <p>Returns:</p> <ul> <li> <code>HebrewChar</code>           \u2013            <p>An instance of <code>HebrewChar</code> representing a single unicode character; the base letter of this instance of <code>HebrewChar</code>.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.final_letter","title":"<code>final_letter: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether or not the letter is a \"final\" or \"Sofit\" letter.</p>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.mispar_gadol","title":"<code>mispar_gadol: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_gadol method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.mispar_hechrachi","title":"<code>mispar_hechrachi: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_hechrachi method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.mispar_katan","title":"<code>mispar_katan: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_katan method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.mispar_kidmi","title":"<code>mispar_kidmi: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_kidmi method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.mispar_meshulash","title":"<code>mispar_meshulash: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the AtBash method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.mispar_mispari","title":"<code>mispar_mispari: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_mispari method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.mispar_perati","title":"<code>mispar_perati: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_perati method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.mispar_siduri","title":"<code>mispar_siduri: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the mispar_siduri method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.ofanim","title":"<code>ofanim: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the ofanim method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.reverse_avgad","title":"<code>reverse_avgad: int</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The value of the character for use in the reverse_avgad method of gematria.</p> </li> </ul>"},{"location":"code_reference/chars/constants/#hebrew.chars.HebrewChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>HebrewChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[HebrewChar]</code>           \u2013            <p>An instance of <code>HebrewChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"HebrewChar\"]:\n    \"\"\"\n    Searches for an instance of `HebrewChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `HebrewChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, HEBREW_CHARS)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.NiqqudChar","title":"<code>NiqqudChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing Niqqud characters used in Hebrew and Yiddish text.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass NiqqudChar(BaseHebrewChar):\n    \"\"\"\n    A class representing Niqqud characters used in Hebrew and Yiddish text.\n    \"\"\"\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"NiqqudChar\"]:\n        \"\"\"\n        Searches for an instance of `NiqqudChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `NiqqudChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, NIQQUD_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.NiqqudChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>NiqqudChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[NiqqudChar]</code>           \u2013            <p>An instance of <code>NiqqudChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"NiqqudChar\"]:\n    \"\"\"\n    Searches for an instance of `NiqqudChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `NiqqudChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, NIQQUD_CHARS)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.OtherChar","title":"<code>OtherChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing the \"other\" or \"uncharacterized\" characters used in Hebrew (and Yiddish) text.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass OtherChar(BaseHebrewChar):\n    \"\"\"\n    A class representing the \"other\" or \"uncharacterized\" characters used in Hebrew (and Yiddish) text.\n    \"\"\"\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"OtherChar\"]:\n        \"\"\"\n        Searches for an instance of `TaamimChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `OtherChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, OTHER_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.OtherChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>TaamimChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[OtherChar]</code>           \u2013            <p>An instance of <code>OtherChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"OtherChar\"]:\n    \"\"\"\n    Searches for an instance of `TaamimChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `OtherChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, OTHER_CHARS)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.TaamimChar","title":"<code>TaamimChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing the \"Trup\" or Hebrew cantillation characters used alongside Hebrew letters.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass TaamimChar(BaseHebrewChar):\n    \"\"\"\n    A class representing the \"Trup\" or [Hebrew cantillation](https://en.wikipedia.org/wiki/Hebrew_cantillation)\n    characters used alongside Hebrew letters.\n    \"\"\"\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"TaamimChar\"]:\n        \"\"\"\n        Searches for an instance of `TaamimChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `TaamimChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, TAAMIM_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.TaamimChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>TaamimChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[TaamimChar]</code>           \u2013            <p>An instance of <code>TaamimChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"TaamimChar\"]:\n    \"\"\"\n    Searches for an instance of `TaamimChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `TaamimChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, TAAMIM_CHARS)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.YiddishChar","title":"<code>YiddishChar</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHebrewChar</code></p> <p>A class representing special characters used in Yiddish text.</p> Source code in <code>hebrew/chars.py</code> <pre><code>@dataclass\nclass YiddishChar(BaseHebrewChar):\n    \"\"\"\n    A class representing special characters used in Yiddish text.\n    \"\"\"\n\n    @classmethod\n    def search(cls, char_name: str) -&gt; Optional[\"YiddishChar\"]:\n        \"\"\"\n        Searches for an instance of `YiddishChar` by name.\n        The search input is case insensitive and is compared to `names` list for this search.\n\n        To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n        :param char_name: A single string representing the name of the character to search for.\n        :return: An instance of `YiddishChar` representing the character with the given name, or `None` if no\n        character is found.\n        \"\"\"\n        return char_search(char_name, YIDDISH_CHARS)\n\n    def __hash__(self):\n        return hash(self.char)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.YiddishChar.search","title":"<code>search(char_name)</code>  <code>classmethod</code>","text":"<p>Searches for an instance of <code>YiddishChar</code> by name. The search input is case insensitive and is compared to <code>names</code> list for this search.</p> <p>To search for any Hebrew character, use <code>hebrew.chars.char_search</code>.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A single string representing the name of the character to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[YiddishChar]</code>           \u2013            <p>An instance of <code>YiddishChar</code> representing the character with the given name, or <code>None</code> if no character is found.</p> </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>@classmethod\ndef search(cls, char_name: str) -&gt; Optional[\"YiddishChar\"]:\n    \"\"\"\n    Searches for an instance of `YiddishChar` by name.\n    The search input is case insensitive and is compared to `names` list for this search.\n\n    To search for any Hebrew character, use `hebrew.chars.char_search`.\n\n    :param char_name: A single string representing the name of the character to search for.\n    :return: An instance of `YiddishChar` representing the character with the given name, or `None` if no\n    character is found.\n    \"\"\"\n    return char_search(char_name, YIDDISH_CHARS)\n</code></pre>"},{"location":"code_reference/chars/constants/#hebrew.chars.char_search","title":"<code>char_search(char_name, char_list=None)</code>","text":"<p>Search for a character by its name.</p> <p>Character classes contain alternate names which are supported by this function! Currently, only english names are supported. TODO: Support search in hebrew, which will need to support hebrew text with or without nikud.</p> <p>Parameters:</p> <ul> <li> <code>char_name</code>               (<code>str</code>)           \u2013            <p>A string containing the name of the character to search for.</p> </li> <li> <code>char_list</code>               (<code>Optional[List[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]]]</code>, default:                   <code>None</code> )           \u2013            <p>A list of <code>BaseHebrewChar</code> characters to use for this search. When None, defaults to all characters (ALL_CHARS).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]]</code>           \u2013            </li> </ul> Source code in <code>hebrew/chars.py</code> <pre><code>def char_search(\n    char_name: str,\n    char_list: Optional[\n        List[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]]\n    ] = None,\n) -&gt; Optional[Union[HebrewChar, YiddishChar, NiqqudChar, TaamimChar, OtherChar]]:\n    \"\"\"\n    Search for a character by its name.\n\n    Character classes contain alternate names which are supported by this function!\n    Currently, only english names are supported.\n    TODO: Support search in hebrew, which will need to support hebrew text with or without nikud.\n\n    :param char_name: A string containing the name of the character to search for.\n    :param char_list: A list of `BaseHebrewChar` characters to use for this search.\n    When None, defaults to all characters (ALL_CHARS).\n    :return:\n    \"\"\"\n    char_list = char_list if char_list else ALL_CHARS\n    for char in char_list:\n        if char_name.lower() in [n.lower() for n in char.names]:\n            return CHARS[char.char]\n    return None\n</code></pre>"},{"location":"code_reference/numerical_conversions/convert/","title":"Convert","text":""},{"location":"code_reference/numerical_conversions/convert/#hebrew.numerical_conversion.convert.number_to_hebrew_string","title":"<code>number_to_hebrew_string(number, punctuate=True, geresh=True, substitution_functions=Substitutions.DEFAULT)</code>","text":"<p>Convert a number into its Hebrew letter form.</p> <p>Parameters:</p> <ul> <li> <code>number</code>               (<code>int</code>)           \u2013            <p>The number to convert to Hebrew letters. Must be greater than 0.</p> </li> <li> <code>punctuate</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to add punctuation in the appropriate places.</p> </li> <li> <code>geresh</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If punctuate is true, whether to use the unicode geresh or an apostrophe.</p> </li> <li> <code>substitution_functions</code>               (<code>Optional[Tuple[Callable[[str], str], ...]]</code>, default:                   <code>DEFAULT</code> )           \u2013            <p>A tuple of functions that replaces some hebrew values in the result with an appropriate equivalent. By default, \"\u05d9\u05d4\" and \"\u05d9\u05d5\" are replaced with \"\u05d8\u05d5\" and \"\u05d8\u05d6\" respectively. To replace all values such as \u05e9\u05de\u05d3 ,\u05e8\u05e2, and others, use <code>Substitutions.ALL</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            </li> </ul> Source code in <code>hebrew/numerical_conversion/convert.py</code> <pre><code>def number_to_hebrew_string(\n    number: int,\n    punctuate: bool = True,\n    geresh: bool = True,\n    substitution_functions: Optional[\n        Tuple[Callable[[str], str], ...]\n    ] = Substitutions.DEFAULT,\n) -&gt; str:\n    \"\"\"\n    Convert a number into its Hebrew letter form.\n\n    :param number: The number to convert to Hebrew letters. Must be greater than 0.\n    :param punctuate: Whether to add punctuation in the appropriate places.\n    :param geresh: If punctuate is true, whether to use the unicode geresh or an apostrophe.\n    :param substitution_functions: A tuple of functions that replaces some hebrew values in the result with an\n    appropriate equivalent. By default, \"\u05d9\u05d4\" and \"\u05d9\u05d5\" are replaced with \"\u05d8\u05d5\" and \"\u05d8\u05d6\" respectively. To replace all\n    values such as \u05e9\u05de\u05d3 ,\u05e8\u05e2, and others, use `Substitutions.ALL`.\n    :return:\n    \"\"\"\n    # Handle 0\n    if number &lt; 1:\n        raise ValueError(\"Number must be greater than 0\")\n\n    reversed_result = \"\"\n\n    # Prepare the numbers\n    ones_value = _ones_column_value(number)\n    if ones_value &gt; 0:\n        reversed_result += HEBREW_LETTER_TO_VALUE_MAPPINGS[ones_value]\n    tens_value = _tens_column_value(number)\n    if tens_value &gt; 0:\n        reversed_result += HEBREW_LETTER_TO_VALUE_MAPPINGS[tens_value]\n    hundreds_value = _hundreds_and_above_column_value(number)\n    if hundreds_value &gt; 0:\n        reversed_result += _hundreds_to_letters(hundreds_value)\n\n    # Reverse the string\n    result = reversed_result[::-1]\n\n    # Substitute flags\n    if substitution_functions:\n        for func in substitution_functions:\n            result = func(result)\n\n    # Add Punctuation\n    if punctuate:\n        if len(result) &gt; 1:\n            punctuation = \"\u05f4\" if geresh else '\"'\n            result = result[:-1] + punctuation + result[-1]\n        else:\n            punctuation = \"\u05f3\" if geresh else \"'\"\n            result += punctuation\n\n    return result\n</code></pre>"},{"location":"code_reference/numerical_conversions/substitute/","title":"Substitute","text":""},{"location":"code_reference/numerical_conversions/substitute/#hebrew.numerical_conversion.substitute.POLITE_WORD_MAP","title":"<code>POLITE_WORD_MAP = {'\u05e8\u05e2$': '\u05e2\u05e8', '\u05e8\u05e2\u05d1$': '\u05e2\u05e8\u05d1', '^\u05e8\u05e2\u05d4$': '\u05e2\u05e8\u05d4', '\u05e8\u05e6\u05d7$': '\u05e8\u05d7\u05e6', '^\u05e9\u05d3$': '\u05d3\u05e9', '\u05e9\u05de\u05d3$': '\u05e9\u05d3\u05de'}</code>  <code>module-attribute</code>","text":"<p>Map of \"impolite\" words, and their polite equivalents.</p>"},{"location":"code_reference/numerical_conversions/substitute/#hebrew.numerical_conversion.substitute.Substitutions","title":"<code>Substitutions</code>","text":"<p>Constants containing sets of functions for use in substitution_functions.</p> Source code in <code>hebrew/numerical_conversion/substitute.py</code> <pre><code>class Substitutions:\n    \"\"\"\n    Constants containing sets of functions for use in substitution_functions.\n    \"\"\"\n\n    DEFAULT = _BASIC_FUNCTIONS\n    \"The default set of substitutions; '\u05d8\u05d5' and '\u05d8\u05d6'\"\n\n    ALL = (\n        tuple(_get_word_substitution_func(w[0], w[1]) for w in POLITE_WORD_MAP.items())\n        + _BASIC_FUNCTIONS\n    )\n\n    \"All available substitution functions. See `POLITE_WORD_MAP` and `DEFAULT`; '\u05d8\u05d5' and '\u05d8\u05d6'\"\n</code></pre>"},{"location":"code_reference/numerical_conversions/substitute/#hebrew.numerical_conversion.substitute.Substitutions.ALL","title":"<code>ALL = tuple(_get_word_substitution_func(w[0], w[1]) for w in POLITE_WORD_MAP.items()) + _BASIC_FUNCTIONS</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>All available substitution functions. See <code>POLITE_WORD_MAP</code> and <code>DEFAULT</code>; '\u05d8\u05d5' and '\u05d8\u05d6'</p>"},{"location":"code_reference/numerical_conversions/substitute/#hebrew.numerical_conversion.substitute.Substitutions.DEFAULT","title":"<code>DEFAULT = _BASIC_FUNCTIONS</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The default set of substitutions; '\u05d8\u05d5' and '\u05d8\u05d6'</p>"},{"location":"code_reference/numerical_conversions/substitute/#hebrew.numerical_conversion.substitute.yud_hey_to_tes_vav","title":"<code>yud_hey_to_tes_vav(value)</code>","text":"<p>Used to substitute '\u05d9\u05d4' for '\u05d8\u05d5' in a string</p> Source code in <code>hebrew/numerical_conversion/substitute.py</code> <pre><code>def yud_hey_to_tes_vav(value: str) -&gt; str:\n    \"\"\"Used to substitute '\u05d9\u05d4' for '\u05d8\u05d5' in a string\"\"\"\n    return re.sub(r\"\u05d9\u05d4$\", \"\u05d8\u05d5\", value)\n</code></pre>"},{"location":"code_reference/numerical_conversions/substitute/#hebrew.numerical_conversion.substitute.yud_vav_to_tes_zayen","title":"<code>yud_vav_to_tes_zayen(value)</code>","text":"<p>Used to substitute '\u05d9\u05d5' for '\u05d8\u05d6' in a string</p> Source code in <code>hebrew/numerical_conversion/substitute.py</code> <pre><code>def yud_vav_to_tes_zayen(value: str) -&gt; str:\n    \"\"\"Used to substitute '\u05d9\u05d5' for '\u05d8\u05d6' in a string\"\"\"\n    return re.sub(r\"\u05d9\u05d5$\", \"\u05d8\u05d6\", value)\n</code></pre>"}]}